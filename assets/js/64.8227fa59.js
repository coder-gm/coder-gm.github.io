(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{663:function(a,e,s){"use strict";s.r(e);var t=s(33),v=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),s("ul",[s("li",[a._v("类加载器是负责加载类的对象。 "),s("code",[a._v("ClassLoader")]),a._v("类是一个抽象类。  给定一个类的"),s("a",{attrs:{href:"#name"}},[a._v("binary name")]),a._v(" ，类加载器应该尝试定位或生成构成类的定义的数据。  典型的策略是将名称转换为文件名，然后从文件系统中读取该名称的“类文件”。")])]),a._v(" "),s("h1",{attrs:{id:"构造方法详细信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法详细信息"}},[a._v("#")]),a._v(" 构造方法详细信息")]),a._v(" "),s("h2",{attrs:{id:"classloader-classloader-parent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader-classloader-parent"}},[a._v("#")]),a._v(" ClassLoader(ClassLoader parent)")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("protected ClassLoader(ClassLoader parent)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("使用指定的父类加载器创建一个新的类加载器进行委派。")]),a._v(" "),s("p",[a._v("如果有安全管理员，则调用其"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/SecurityManager.html#checkCreateClassLoader--"}},[s("code",[a._v("checkCreateClassLoader")])]),a._v("方法。  这可能会导致安全例外。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("parent")]),a._v(" - 父类加载器")])]),a._v(" "),s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("SecurityException")]),a._v(" -  如果安全管理器存在，并且其 "),s("code",[a._v("checkCreateClassLoader")]),a._v("方法不允许创建新的类加载器。")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.2")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader"}},[a._v("#")]),a._v(" ClassLoader()")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("protected ClassLoader()\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("创建使用该方法返回的"),s("code",[a._v("ClassLoader")]),a._v("一个新的类加载器"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getSystemClassLoader--"}},[s("code",[a._v("getSystemClassLoader()")])]),a._v("作为父类加载器。")],1),a._v(" "),s("p",[a._v("如果有安全管理员，则调用其"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/SecurityManager.html#checkCreateClassLoader--"}},[s("code",[a._v("checkCreateClassLoader")])]),a._v("方法。  这可能会导致安全例外。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("SecurityException")]),a._v(" -  如果安全管理器存在，并且其 "),s("code",[a._v("checkCreateClassLoader")]),a._v("方法不允许创建新的类加载器。")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h1",{attrs:{id:"方法详细信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法详细信息"}},[a._v("#")]),a._v(" 方法详细信息")]),a._v(" "),s("h2",{attrs:{id:"loadclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadclass"}},[a._v("#")]),a._v(" loadClass")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public 类<?> loadClass(String name)\n                   throws ClassNotFoundException\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("加载指定的课程"),s("a",{attrs:{href:"#name"}},[a._v("binary name")]),a._v(" 。  该方法以与"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"}},[s("code",[a._v("loadClass(String, boolean)")])]),a._v("方法相同的方式搜索类。 它由Java虚拟机调用来解析类引用。  调用此方法相当于调用"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#loadClass-java.lang.String-boolean-"}},[s("code",[a._v("loadClass(name, false)")])]),a._v(" 。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - "),s("a",{attrs:{href:"#name"}},[a._v("班级的binary name")])])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("由此产生的 "),s("code",[a._v("类")]),a._v("对象")])]),a._v(" "),s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("ClassNotFoundException")]),a._v("  - 如果没有找到该类")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"获取资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取资源"}},[a._v("#")]),a._v(" 获取资源")]),a._v(" "),s("h3",{attrs:{id:"getresource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getresource"}},[a._v("#")]),a._v(" getResource")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public URL getResource(String name)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("找到具有给定名称的资源。资源是可以通过独立于代码位置的方式由类代码访问的一些数据（图像，音频，文本等）。")]),a._v(" "),s("p",[a._v("资源的名称是"),s("code",[a._v("标识")]),a._v("资源的“ "),s("code",[a._v("/")]),a._v(" ”分隔路径名。")]),a._v(" "),s("p",[a._v("此方法首先将搜索父类加载器的资源; 如果父级是"),s("code",[a._v("null")]),a._v("  ，则会搜索内置到虚拟机的类加载器的路径。 那个失败，这个方法会调用"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#findResource-java.lang.String-"}},[s("code",[a._v("findResource(String)")])]),a._v("来查找资源。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("API Note:")]),a._v(" "),s("p",[a._v("当覆盖此方法时，建议实现确保任何委托与 "),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getResources-java.lang.String-"}},[s("code",[a._v("getResources(String)")])]),a._v("方法一致。")],1)]),a._v(" "),s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - 资源名称")])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("一个 "),s("code",[a._v("URL")]),a._v("对象读取资源，或 "),s("code",[a._v("null")]),a._v("如果资源不能被发现或者调用方没有足够的权限来获取资源。")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.1")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h3",{attrs:{id:"getresources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getresources"}},[a._v("#")]),a._v(" getResources")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public Enumeration<URL> getResources(String name)\n                              throws IOException\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("查找具有给定名称的所有资源。资源是可以通过独立于代码位置的方式由类代码访问的一些数据（图像，音频，文本等）。")]),a._v(" "),s("p",[a._v("资源的名称是"),s("code",[a._v("标识")]),a._v("资源的"),s("code",[a._v("/")]),a._v("分隔路径名。")]),a._v(" "),s("p",[a._v("搜索顺序在"),s("code",[a._v("getResource(String)")]),a._v("的文档中"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getResource-java.lang.String-"}},[a._v("描述")]),a._v("  。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("API Note:")]),a._v(" "),s("p",[a._v("当覆盖此方法时，建议实现确保任何委托与"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getResource-java.lang.String-"}},[s("code",[a._v("getResource(String)")])]),a._v("方法一致。  这应该确保Enumeration的"),s("code",[a._v("nextElement")]),a._v("方法返回的第一个元素是与"),s("code",[a._v("getResource(String)")]),a._v("方法返回的资源相同的资源。")],1)]),a._v(" "),s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - 资源名称")])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("枚举该资源的"),s("RouterLink",{attrs:{to:"/01.Java/java/net/URL.html"}},[s("code",[a._v("URL")]),a._v("个")]),a._v("对象。  如果找不到资源，枚举将为空。 类加载器无权访问的资源将不在枚举中。")],1)]),a._v(" "),s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("IOException")]),a._v(" - 如果发生I / O错误")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.2")])]),a._v(" "),s("li",[s("p",[a._v("另请参见：")]),a._v(" "),s("p",[s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#findResources-java.lang.String-"}},[s("code",[a._v("findResources(String)")])])],1)])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h3",{attrs:{id:"getsystemresource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getsystemresource"}},[a._v("#")]),a._v(" getSystemResource")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static URL getSystemResource(String name)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("从用于加载类的搜索路径中查找指定名称的资源。 该方法通过系统类加载器定位资源（参见"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getSystemClassLoader--"}},[s("code",[a._v("getSystemClassLoader()")])]),a._v("  ）。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - 资源名称")])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("A "),s("RouterLink",{attrs:{to:"/01.Java/java/net/URL.html"}},[s("code",[a._v("URL")])]),a._v("用于读取资源的对象，如果资源无法找到，  "),s("code",[a._v("则为null")])],1)]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.1")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h3",{attrs:{id:"getsystemresources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getsystemresources"}},[a._v("#")]),a._v(" getSystemResources")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static Enumeration<URL> getSystemResources(String name)\n                                           throws IOException\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("从用于加载类的搜索路径中查找指定名称的所有资源。因此找到的"),s("RouterLink",{attrs:{to:"/01.Java/java/util/Enumeration.html"}},[a._v("资源")]),a._v("作为"),s("RouterLink",{attrs:{to:"/01.Java/java/net/URL.html"}},[s("code",[a._v("URL")])]),a._v("对象的"),s("RouterLink",{attrs:{to:"/01.Java/java/util/Enumeration.html"}},[s("code",[a._v("Enumeration")])]),a._v("返回。")],1),a._v(" "),s("p",[a._v("搜索顺序在"),s("code",[a._v("getSystemResource(String)")]),a._v("的文档中"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getSystemResource-java.lang.String-"}},[a._v("描述")]),a._v("  。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - 资源名称")])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("资源的"),s("RouterLink",{attrs:{to:"/01.Java/java/net/URL.html"}},[a._v("枚举"),s("code",[a._v("URL")])]),a._v("对象")],1)]),a._v(" "),s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("IOException")]),a._v(" - 如果发生I / O错误")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.2")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h3",{attrs:{id:"getresourceasstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getresourceasstream"}},[a._v("#")]),a._v(" getResourceAsStream")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public InputStream getResourceAsStream(String name)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("返回用于读取指定资源的输入流。")]),a._v(" "),s("p",[a._v("搜索顺序在"),s("code",[a._v("getResource(String)")]),a._v("的文档中"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getResource-java.lang.String-"}},[a._v("描述")]),a._v("  。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - 资源名称")])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("用于读取资源的输入流，如果资源无法找到， "),s("code",[a._v("则为null")])])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.1")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h3",{attrs:{id:"getsystemresourceasstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getsystemresourceasstream"}},[a._v("#")]),a._v(" getSystemResourceAsStream")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static InputStream getSystemResourceAsStream(String name)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("打开阅读，从用于加载类的搜索路径中指定名称的资源。  该方法通过系统类加载器定位资源（参见"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#getSystemClassLoader--"}},[s("code",[a._v("getSystemClassLoader()")])]),a._v("  ）。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("name")]),a._v(" - 资源名称")])]),a._v(" "),s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("用于读取资源的输入流，如果资源无法找到， "),s("code",[a._v("则为null")])])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.1")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"getparent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getparent"}},[a._v("#")]),a._v(" getParent")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public final ClassLoader getParent()\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("返回父类加载器进行委派。一些实现可以使用"),s("code",[a._v("null")]),a._v("来表示引导类加载器。如果此类加载器的父级是引导类加载器，则此方法将返回"),s("code",[a._v("null")]),a._v(" 。")]),a._v(" "),s("p",[a._v("如果存在安全管理员，并且调用者的类加载器不是"),s("code",[a._v("null")]),a._v("并且不是此类加载器的祖先，则此方法将调用具有"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/RuntimePermission.html#RuntimePermission-java.lang.String-"}},[s("code",[a._v('RuntimePermission("getClassLoader")')])]),a._v("权限的安全管理器的"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/SecurityManager.html#checkPermission-java.security.Permission-"}},[s("code",[a._v("checkPermission")])]),a._v("方法来验证是否允许访问父类加载器。  如果没有， "),s("code",[a._v("SecurityException")]),a._v("将被抛出。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("父母 "),s("code",[a._v("ClassLoader")])])]),a._v(" "),s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("SecurityException")]),a._v(" -  如果安全管理器存在，并且其 "),s("code",[a._v("checkPermission")]),a._v("方法不允许访问此类加载器的父类加载器。")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.2")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"getsystemclassloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getsystemclassloader"}},[a._v("#")]),a._v(" getSystemClassLoader")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static ClassLoader getSystemClassLoader()\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("返回用于委派的系统类加载器。这是新的"),s("code",[a._v("ClassLoader")]),a._v("实例的默认委派父项， "),s("code",[a._v("通常")]),a._v("是用于启动应用程序的类加载器。")]),a._v(" "),s("p",[a._v("该方法首先在运行时的启动顺序中早期被调用，此时它将创建系统类加载器并将其设置为调用"),s("code",[a._v("Thread")]),a._v("的上下文类加载器。")]),a._v(" "),s("p",[a._v("默认的系统类加载器是此类的实现相关实例。")]),a._v(" "),s("p",[a._v("如果在首次调用此方法时定义系统属性“ "),s("code",[a._v("java.system.class.loader")]),a._v("  ”，那么该属性的值将被视为将作为系统类加载器返回的类的名称。  类使用默认的系统类加载器加载和必须定义一个公共构造，其被用作代理父"),s("code",[a._v("ClassLoader")]),a._v("类型的单个参数。  然后使用该构造函数创建一个实例，并使用默认的系统类加载器作为参数。 所生成的类加载器被定义为系统类加载器。")]),a._v(" "),s("p",[a._v("如果安全管理器存在，并且调用者的类加载器是不是"),s("code",[a._v("null")]),a._v("和调用者的类加载器是不一样的，或者系统类加载器的祖先，则此方法调用安全管理器的"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/SecurityManager.html#checkPermission-java.security.Permission-"}},[s("code",[a._v("checkPermission")])]),a._v("方法与"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/RuntimePermission.html#RuntimePermission-java.lang.String-"}},[s("code",[a._v('RuntimePermission("getClassLoader")')])]),a._v("权限验证访问到系统类加载器。  如果没有， "),s("code",[a._v("SecurityException")]),a._v("将被抛出。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("结果")]),a._v(" "),s("p",[a._v("系统 "),s("code",[a._v("ClassLoader")]),a._v("用于委托，或 "),s("code",[a._v("null")]),a._v("如果没有")])]),a._v(" "),s("li",[s("p",[a._v("异常")]),a._v(" "),s("p",[s("code",[a._v("SecurityException")]),a._v(" -  如果安全管理器存在，并且其 "),s("code",[a._v("checkPermission")]),a._v("方法不允许访问系统类加载器。")]),a._v(" "),s("p",[s("code",[a._v("IllegalStateException")]),a._v("  - 如果在构建由“ "),s("code",[a._v("java.system.class.loader")]),a._v(" ”属性指定的类加载器中递归调用。")]),a._v(" "),s("p",[s("code",[a._v("Error")]),a._v(" - 如果定义了系统属性“  "),s("code",[a._v("java.system.class.loader")]),a._v("  ”但是无法加载命名类，则提供程序类不会定义所需的构造函数，或者在构造函数被调用时抛出异常。 错误的根本原因可以通过"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/Throwable.html#getCause--"}},[s("code",[a._v("Throwable.getCause()")])]),a._v("方法"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/Throwable.html#getCause--"}},[a._v("检索")]),a._v(" 。")],1)])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"setdefaultassertionstatus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setdefaultassertionstatus"}},[a._v("#")]),a._v(" setDefaultAssertionStatus")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void setDefaultAssertionStatus(boolean enabled)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("设置此类加载器的默认断言状态。  此设置确定此类加载器加载的类是否将来将被初始化，默认情况下将启用或禁用断言。 可以通过调用"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#setPackageAssertionStatus-java.lang.String-boolean-"}},[s("code",[a._v("setPackageAssertionStatus(String, boolean)")])]),a._v("或"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#setClassAssertionStatus-java.lang.String-boolean-"}},[s("code",[a._v("setClassAssertionStatus(String, boolean)")])]),a._v("在每个包或每个类的基础上覆盖此设置。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("enabled")]),a._v(" - "),s("code",[a._v("true")]),a._v("如果此类加载器加载的类将在以后默认启用 "),s("code",[a._v("断言")]),a._v(" ，  "),s("code",[a._v("false")]),a._v("如果默认情况下禁用断言。")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.4")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"setpackageassertionstatus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setpackageassertionstatus"}},[a._v("#")]),a._v(" setPackageAssertionStatus")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void setPackageAssertionStatus(String packageName,\n                                      boolean enabled)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("设置命名包的包默认断言状态。软件包默认的断言状态确定将来属于命名软件包或其任何“子包”的类初始化的类的断言状态。")]),a._v(" "),s("p",[a._v("名为p的包的子包是其名称以“ "),s("code",[a._v("p.")]),a._v(" ”开头的任何包。 例如，  "),s("code",[a._v("javax.swing.text")]),a._v("是javax.swing的"),s("code",[a._v("子包")]),a._v(" ，  "),s("code",[a._v("java.util")]),a._v("和"),s("code",[a._v("java.lang.reflect")]),a._v("都是java的"),s("code",[a._v("子包")]),a._v(" 。")]),a._v(" "),s("p",[a._v("如果多个包默认值适用于给定的类，则与最特定包相关的包默认优先于其他包。  例如，如果"),s("code",[a._v("javax.lang")]),a._v("和"),s("code",[a._v("javax.lang.reflect")]),a._v("都具有与它们相关联的包默认值，则后者的包默认值适用于"),s("code",[a._v("javax.lang.reflect")]),a._v("中的类。")]),a._v(" "),s("p",[a._v("软件包默认值优先于类加载器的默认断言状态，并且可以通过调用"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#setClassAssertionStatus-java.lang.String-boolean-"}},[s("code",[a._v("setClassAssertionStatus(String, boolean)")])]),a._v("在每个类的基础上"),s("RouterLink",{attrs:{to:"/01.Java/java/lang/ClassLoader.html#setClassAssertionStatus-java.lang.String-boolean-"}},[a._v("覆盖")]),a._v("  。")],1),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("packageName")]),a._v(" - 要设置其包默认断言状态的包的名称。 A  "),s("code",[a._v("null的")]),a._v("值表示未命名的包为“current”（参见The Java™ Language  Specification的 7.4.2）。")]),a._v(" "),s("p",[s("code",[a._v("enabled")]),a._v(" - "),s("code",[a._v("true")]),a._v("如果  "),s("code",[a._v("由此")]),a._v("类加载器加载且属于命名的软件包或其任何子软件包的类将默认启用 "),s("code",[a._v("断言，")]),a._v("如果默认情况下禁用断言，则为false。")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.4")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"setclassassertionstatus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setclassassertionstatus"}},[a._v("#")]),a._v(" setClassAssertionStatus")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void setClassAssertionStatus(String className,\n                                    boolean enabled)\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("为此类加载器中指定的顶级类和其中包含的任何嵌套类设置所需的断言状态。此设置优先于类加载器的默认断言状态，并优先于任何适用的每个包的默认值。如果已经初始化命名类，则此方法不起作用。（一旦初始化了一个类，它的断言状态就不能改变了。）")]),a._v(" "),s("p",[a._v("如果命名类不是顶级类，则此调用对任何类的实际断言状态都不起作用。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("参数")]),a._v(" "),s("p",[s("code",[a._v("className")]),a._v(" - 要设置其断言状态的顶级类的完全限定类名。")]),a._v(" "),s("p",[s("code",[a._v("enabled")]),a._v(" - "),s("code",[a._v("true")]),a._v("如果指定的类要在（及）如果初始化时启用断言，  "),s("code",[a._v("false")]),a._v("如果该类禁用断言。")])]),a._v(" "),s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.4")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])]),a._v(" "),s("h2",{attrs:{id:"clearassertionstatus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clearassertionstatus"}},[a._v("#")]),a._v(" clearAssertionStatus")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void clearAssertionStatus()\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("将此类加载器的默认断言状态设置为"),s("code",[a._v("false")]),a._v("  ，并丢弃与类加载器相关"),s("code",[a._v("联的")]),a._v("任何包默认值或类断言状态设置。  提供了这种方法，以便可以使类加载器忽略任何命令行或持久断言状态设置，并“以干净的平板开始”。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("从以下版本开始：")]),a._v(" "),s("p",[a._v("1.4")])])]),a._v(" "),s("p",[s("strong",[a._v("代码示例:")])])])}),[],!1,null,null,null);e.default=v.exports}}]);