(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{724:function(_,v,e){"use strict";e.r(v);var o=e(33),s=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"第1章-数据库其它调优策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第1章-数据库其它调优策略"}},[_._v("#")]),_._v(" 第1章 数据库其它调优策略")]),_._v(" "),e("h2",{attrs:{id:"_1-数据库调优的措施"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库调优的措施"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("数据库调优的措施")])]),_._v(" "),e("h3",{attrs:{id:"_1-1-调优的目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-调优的目标"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.1")]),_._v(" "),e("strong",[_._v("调优的目标")])]),_._v(" "),e("ul",[e("li",[_._v("尽可能"),e("code",[_._v("节省系统资源")]),_._v("，以便系统可以提供更大负荷的服务。（吞吐量更大）")]),_._v(" "),e("li",[_._v("合理的结构设计和参数调整，以提高用户操作"),e("code",[_._v("响应的速度")]),_._v("。（响应速度更快）")]),_._v(" "),e("li",[_._v("减少系统的瓶颈，提高MySQL数据库整体的性能。")])]),_._v(" "),e("h3",{attrs:{id:"_1-2-如何定位调优问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-如何定位调优问题"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.2")]),_._v(" "),e("strong",[_._v("如何定位调优问题")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("用户的反馈（主要）")])]),_._v(" "),e("li",[e("strong",[_._v("日志分析（主要）")])]),_._v(" "),e("li",[e("strong",[_._v("服务器资源使用监控")])]),_._v(" "),e("li",[e("strong",[_._v("数据库内部状况监控")])]),_._v(" "),e("li",[e("strong",[_._v("其它")])])]),_._v(" "),e("h3",{attrs:{id:"_1-3-调优的维度和步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-调优的维度和步骤"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.3")]),_._v(" "),e("strong",[_._v("调优的维度和步骤")])]),_._v(" "),e("p",[e("strong",[_._v("第1步：选择适合的")]),_._v(" "),e("strong",[_._v("DBMS")])]),_._v(" "),e("p",[e("strong",[_._v("第2步：优化表设计")])]),_._v(" "),e("p",[e("strong",[_._v("第3步：优化逻辑查询")])]),_._v(" "),e("p",[e("strong",[_._v("第4步：优化物理查询")])]),_._v(" "),e("p",[_._v("物理查询优化是在确定了逻辑查询优化之后，采用物理优化技术（比如索引等），通过计算代价模型对各种可能的访问路径进行估算，从而找到执行方式中代价最小的作为执行计划。")]),_._v(" "),e("p",[e("strong",[_._v("第5步：使用")]),_._v(" "),e("strong",[_._v("Redis")]),_._v(" "),e("strong",[_._v("或")]),_._v(" "),e("strong",[_._v("Memcached")]),_._v(" "),e("strong",[_._v("作为缓存")])]),_._v(" "),e("p",[e("strong",[_._v("第6步：库级优化")])]),_._v(" "),e("p",[e("strong",[_._v("1、读写分离")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031025279.png",alt:"image-20220403102536170"}})]),_._v(" "),e("p",[e("strong",[_._v("2、数据分片")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031026743.png",alt:"image-20220403102618627"}})]),_._v(" "),e("h2",{attrs:{id:"_2-优化mysql服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-优化mysql服务器"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("优化MySQL服务器")])]),_._v(" "),e("h3",{attrs:{id:"_2-1-优化服务器硬件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-优化服务器硬件"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.1")]),_._v(" "),e("strong",[_._v("优化服务器硬件")])]),_._v(" "),e("p",[_._v("**服务器的硬件性能直接决定着MySQL数据库的性能。**硬件的性能瓶颈直接决定MySQL数据库的运行速度和效率。针对性能瓶颈提高硬件配置，可以提高MySQL数据库查询、更新的速度。")]),_._v(" "),e("p",[_._v("（1）"),e("code",[_._v("配置较大的内存")])]),_._v(" "),e("p",[_._v("（2）"),e("code",[_._v("配置高速磁盘系统")])]),_._v(" "),e("p",[_._v("（3）"),e("code",[_._v("合理分布磁盘I/O")])]),_._v(" "),e("p",[_._v("（4）"),e("code",[_._v("配置多处理器")])]),_._v(" "),e("h3",{attrs:{id:"_2-2-优化mysql的参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-优化mysql的参数"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.2")]),_._v(" "),e("strong",[_._v("优化MySQL的参数")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("innodb_buffer_pool_size")]),_._v("：这个参数是Mysql数据库最重要的参数之一，表示InnoDB类型的"),e("code",[_._v("表和索引的最大缓存")]),_._v("。它不仅仅缓存"),e("code",[_._v("索引数据")]),_._v("，还会缓存"),e("code",[_._v("表的数据")]),_._v("。这个值越大，查询的速度就会越快。但是这个值太大会影响操作系统的性能。")]),_._v(" "),e("li",[e("code",[_._v("key_buffer_size")]),_._v("：表示"),e("code",[_._v("索引缓冲区的大小")]),_._v("。索引缓冲区是所有的"),e("code",[_._v("线程共享")]),_._v("。增加索引缓冲区可以得到更好处理的索引（对所有读和多重写）。当然，这个值不是越大越好，它的大小取决于内存的大小。如果这个值太大，就会导致操作系统频繁换页，也会降低系统性能。对于内存在"),e("code",[_._v("4GB")]),_._v("左右的服务器该参数可设置为"),e("code",[_._v("256M")]),_._v("或"),e("code",[_._v("384M")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("table_cache")]),_._v("：表示"),e("code",[_._v("同时打开的表的个数")]),_._v("。这个值越大，能够同时打开的表的个数越多。物理内存越大，设置就越大。默认为2402，调到512-1024最佳。这个值不是越大越好，因为同时打开的表太多会影响操作系统的性能。")]),_._v(" "),e("li",[e("code",[_._v("query_cache_size")]),_._v("：表示"),e("code",[_._v("查询缓冲区的大小")]),_._v("。可以通过在MySQL控制台观察，如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，就要增加Query_cache_size的值；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓存；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。MySQL8.0之后失效。该参数需要和query_cache_type配合使用。")]),_._v(" "),e("li",[e("code",[_._v("query_cache_type")]),_._v("的值是0时，所有的查询都不使用查询缓存区。但是query_cache_type=0并不会导致MySQL释放query_cache_size所配置的缓存区内存。\n"),e("ul",[e("li",[_._v("当query_cache_type=1时，所有的查询都将使用查询缓存区，除非在查询语句中指定"),e("code",[_._v("SQL_NO_CACHE")]),_._v("，如SELECT SQL_NO_CACHE * FROM tbl_name。")]),_._v(" "),e("li",[_._v("当query_cache_type=2时，只有在查询语句中使用"),e("code",[_._v("SQL_CACHE")]),_._v("关键字，查询才会使用查询缓存区。使用查询缓存区可以提高查询的速度，这种方式只适用于修改操作少且经常执行相同的查询操作的情况。")])])]),_._v(" "),e("li",[e("code",[_._v("sort_buffer_size")]),_._v("：表示每个"),e("code",[_._v("需要进行排序的线程分配的缓冲区的大小")]),_._v("。增加这个参数的值可以提高"),e("code",[_._v("ORDER BY")]),_._v("或"),e("code",[_._v("GROUP BY")]),_._v("操作的速度。默认数值是2 097 144字节（约2MB）。对于内存在4GB左右的服务器推荐设置为6-8M，如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 6 ＝ 600MB。")]),_._v(" "),e("li",[e("code",[_._v("join_buffer_size = 8M")]),_._v("：表示"),e("code",[_._v("联合查询操作所能使用的缓冲区大小")]),_._v("，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。")]),_._v(" "),e("li",[e("code",[_._v("read_buffer_size")]),_._v("：表示"),e("code",[_._v("每个线程连续扫描时为扫描的每个表分配的缓冲区的大小（字节）")]),_._v("。当线程从表中连续读取记录时需要用到这个缓冲区。SET SESSION read_buffer_size=n可以临时设置该参数的值。默认为64K，可以设置为4M。")]),_._v(" "),e("li",[e("code",[_._v("innodb_flush_log_at_trx_commit")]),_._v("：表示"),e("code",[_._v("何时将缓冲区的数据写入日志文件")]),_._v("，并且将日志文件写入磁盘中。该参数对于innoDB引擎非常重要。该参数有3个值，分别为0、1和2。该参数的默认值为1。\n"),e("ul",[e("li",[_._v("值为"),e("code",[_._v("0")]),_._v("时，表示"),e("code",[_._v("每秒1次")]),_._v("的频率将数据写入日志文件并将日志文件写入磁盘。每个事务的commit并不会触发前面的任何操作。该模式速度最快，但不太安全，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。")]),_._v(" "),e("li",[_._v("值为"),e("code",[_._v("1")]),_._v("时，表示"),e("code",[_._v("每次提交事务时")]),_._v("将数据写入日志文件并将日志文件写入磁盘进行同步。该模式是最安全的，但也是最慢的一种方式。因为每次事务提交或事务外的指令都需要把日志写入（flush）硬盘。")]),_._v(" "),e("li",[_._v("值为"),e("code",[_._v("2")]),_._v("时，表示"),e("code",[_._v("每次提交事务时")]),_._v("将数据写入日志文件，"),e("code",[_._v("每隔1秒")]),_._v("将日志文件写入磁盘。该模式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。")])])]),_._v(" "),e("li",[e("code",[_._v("innodb_log_buffer_size")]),_._v("：这是 InnoDB 存储引擎的"),e("code",[_._v("事务日志所使用的缓冲区")]),_._v("。为了提高性能，也是先将信息写入 Innodb Log Buffer 中，当满足 innodb_flush_log_trx_commit 参数所设置的相应条件（或者日志缓冲区写满）之后，才会将日志写到文件（或者同步到磁盘）中。")]),_._v(" "),e("li",[e("code",[_._v("max_connections")]),_._v("：表示 允许连接到MySQL数据库的最大数量 ，默认值是 151 。如果状态变量connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。这个连接数 不是越大 越好 ，因为这些连接会浪费内存的资源。过多的连接可能会导致MySQL服务器僵死。")]),_._v(" "),e("li",[e("code",[_._v("back_log")]),_._v("：用于"),e("code",[_._v("控制MySQL监听TCP端口时设置的积压请求栈大小")]),_._v("。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 对于Linux系统推荐设置为小于512的整数，但最大不超过900。如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。")]),_._v(" "),e("li",[e("code",[_._v("thread_cache_size")]),_._v("："),e("code",[_._v("线程池缓存线程数量的大小")]),_._v("，当客户端断开连接后将当前线程缓存起来，当在接到新的连接请求时快速响应无需创建新的线程 。这尤其对那些使用短连接的应用程序来说可以极大的提高创建连接的效率。那么为了提高性能可以增大该参数的值。默认为60，可以设置为120。")]),_._v(" "),e("li",[e("code",[_._v("wait_timeout")]),_._v("：指定"),e("code",[_._v("一个请求的最大连接时间")]),_._v("，对于4GB左右内存的服务器可以设置为5-10。")]),_._v(" "),e("li",[e("code",[_._v("interactive_timeout")]),_._v("：表示服务器在关闭连接前等待行动的秒数。")])]),_._v(" "),e("h2",{attrs:{id:"_3-优化数据库结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-优化数据库结构"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("优化数据库结构")])]),_._v(" "),e("h3",{attrs:{id:"_3-1-拆分表-冷热数据分离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-拆分表-冷热数据分离"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.1")]),_._v(" "),e("strong",[_._v("拆分表：冷热数据分离")])]),_._v(" "),e("h3",{attrs:{id:"_3-2-增加中间表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-增加中间表"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.2")]),_._v(" "),e("strong",[_._v("增加中间表")])]),_._v(" "),e("h3",{attrs:{id:"_3-3-增加冗余字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-增加冗余字段"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.3")]),_._v(" "),e("strong",[_._v("增加冗余字段")])]),_._v(" "),e("h3",{attrs:{id:"_3-4-优化数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-优化数据类型"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.4")]),_._v(" "),e("strong",[_._v("优化数据类型")])]),_._v(" "),e("p",[e("strong",[_._v("情况1：对整数类型数据进行优化。")])]),_._v(" "),e("p",[_._v("遇到整数类型的字段可以用"),e("code",[_._v("INT 型")]),_._v("。这样做的理由是，INT 型数据有足够大的取值范围，不用担心数据超出取值范围的问题。刚开始做项目的时候，首先要保证系统的稳定性，这样设计字段类型是可以的。但在数据量很大的时候，数据类型的定义，在很大程度上会影响到系统整体的执行效率。")]),_._v(" "),e("p",[_._v("对于"),e("code",[_._v("非负型")]),_._v("的数据（如自增ID、整型IP）来说，要优先使用无符号整型"),e("code",[_._v("UNSIGNED")]),_._v("来存储。因为无符号相对于有符号，同样的字节数，存储的数值范围更大。如tinyint有符号为-128-127，无符号为0-255，多出一倍的存储空间。")]),_._v(" "),e("p",[e("strong",[_._v("情况2：既可以使用文本类型也可以使用整数类型的字段，要选择使用整数类型")]),_._v("。")]),_._v(" "),e("p",[_._v("跟文本类型数据相比，大整数往往占用"),e("code",[_._v("更少的存储空间")]),_._v("，因此，在存取和比对的时候，可以占用更少的内存空间。所以，在二者皆可用的情况下，尽量使用整数类型，这样可以提高查询的效率。如：将IP地址转换成整型数据。")]),_._v(" "),e("p",[e("strong",[_._v("情况3：避免使用TEXT、BLOB数据类型")])]),_._v(" "),e("p",[e("strong",[_._v("情况4：避免使用ENUM类型")])]),_._v(" "),e("p",[e("strong",[_._v("情况5：使用TIMESTAMP存储时间")])]),_._v(" "),e("p",[e("strong",[_._v("情况6：用DECIMAL代替FLOAT和DOUBLE存储精确浮点数")])]),_._v(" "),e("p",[e("strong",[_._v("总之，遇到数据量大的项目时，一定要在充分了解业务需求的前提下，合理优化数据类型，这样才能充分发挥资源的效率，使系统达到最优")]),_._v("。")]),_._v(" "),e("h3",{attrs:{id:"_3-5-优化插入记录的速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-优化插入记录的速度"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.5")]),_._v(" "),e("strong",[_._v("优化插入记录的速度")])]),_._v(" "),e("p",[e("strong",[_._v("1. MyISAM引擎的表：")])]),_._v(" "),e("p",[e("strong",[_._v("① 禁用索引")])]),_._v(" "),e("p",[e("strong",[_._v("② 禁用唯一性检查")])]),_._v(" "),e("p",[e("strong",[_._v("③ 使用批量插入")])]),_._v(" "),e("p",[e("strong",[_._v("④ 使用LOAD DATA INFILE 批量导入")])]),_._v(" "),e("p",[e("strong",[_._v("2. InnoDB引擎的表：")])]),_._v(" "),e("p",[e("strong",[_._v("① 禁用唯一性检查")])]),_._v(" "),e("p",[e("strong",[_._v("② 禁用外键检查")])]),_._v(" "),e("p",[e("strong",[_._v("③ 禁止自动提交")])]),_._v(" "),e("h3",{attrs:{id:"_3-6-使用非空约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-使用非空约束"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.6")]),_._v(" "),e("strong",[_._v("使用非空约束")])]),_._v(" "),e("p",[e("strong",[_._v("在设计字段的时候，如果业务允许，建议尽量使用非空约束")])]),_._v(" "),e("h3",{attrs:{id:"_3-7-分析表、检查表与优化表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-分析表、检查表与优化表"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.7")]),_._v(" "),e("strong",[_._v("分析表、检查表与优化表")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("分析表")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name]…\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("p",[_._v("默认的，MySQL服务会将 ANALYZE TABLE语句写到binlog中，以便在主从架构中，从服务能够同步数据。可以添加参数LOCAL 或者 NO_WRITE_TO_BINLOG取消将语句写到binlog中。")]),_._v(" "),e("p",[_._v("使用"),e("code",[_._v("ANALYZE TABLE")]),_._v("分析表的过程中，数据库系统会自动对表加一个"),e("code",[_._v("只读锁")]),_._v("。在分析期间，只能读取表中的记录，不能更新和插入记录。ANALYZE TABLE语句能够分析InnoDB和MyISAM类型的表，但是不能作用于视图。")]),_._v(" "),e("p",[_._v("ANALYZE TABLE分析后的统计结果会反应到"),e("code",[_._v("cardinality")]),_._v("的值，该值统计了表中某一键所在的列不重复的值的个数。"),e("strong",[_._v("该值越接近表中的总行数，则在表连接查询或者索引查询时，就越优先被优化器选择使用。")])]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("检查表")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("CHECK TABLE tbl_name [, tbl_name] ... [option] ... option = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("p",[_._v("MySQL中可以使用"),e("code",[_._v("CHECK TABLE")]),_._v("语句来检查表。CHECK TABLE语句能够检查InnoDB和MyISAM类型的表是否存在错误。CHECK TABLE语句在执行过程中也会给表加上"),e("code",[_._v("只读锁")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("优化表")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("p",[_._v("MySQL中使用"),e("code",[_._v("OPTIMIZE TABLE")]),_._v("语句来优化表。但是，OPTILMIZE TABLE语句只能优化表中的"),e("code",[_._v("VARCHAR")]),_._v("、"),e("code",[_._v("BLOB")]),_._v("或"),e("code",[_._v("TEXT")]),_._v("类型的字段。一个表使用了这些字段的数据类型，若已经"),e("code",[_._v("删除")]),_._v("了表的一大部分数据，或者已经对含有可变长度行的表（含有VARCHAR、BLOB或TEXT列的表）进行了很多"),e("code",[_._v("更新")]),_._v("，则应使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的"),e("code",[_._v("碎片")]),_._v("。")]),_._v(" "),e("p",[_._v("OPTIMIZE TABLE 语句对InnoDB和MyISAM类型的表都有效。该语句在执行过程中也会给表加上"),e("code",[_._v("只读锁")]),_._v("。")]),_._v(" "),e("h1",{attrs:{id:"第2章-事务基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第2章-事务基础知识"}},[_._v("#")]),_._v(" 第2章 事务基础知识")]),_._v(" "),e("h2",{attrs:{id:"_1-数据库事务概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库事务概述"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("数据库事务概述")])]),_._v(" "),e("h3",{attrs:{id:"_1-1-基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-基本概念"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.1")]),_._v(" "),e("strong",[_._v("基本概念")])]),_._v(" "),e("p",[_._v("**事务：**一组逻辑操作单元，使数据从一种状态变换到另一种状态。")]),_._v(" "),e("p",[_._v("**事务处理的原则：**保证所有事务都作为"),e("code",[_._v("一个工作单元")]),_._v("来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交("),e("code",[_._v("commit")]),_._v(")，那么这些修改就"),e("code",[_._v("永久")]),_._v("地保存下来；要么数据库管理系统将"),e("code",[_._v("放弃")]),_._v("所作的所有"),e("code",[_._v("修改")]),_._v("，整个事务回滚("),e("code",[_._v("rollback")]),_._v(")到最初状态。")]),_._v(" "),e("h3",{attrs:{id:"_1-2-事务的acid特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-事务的acid特性"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.2")]),_._v(" "),e("strong",[_._v("事务的ACID特性")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("原子性（atomicity）：")])])]),_._v(" "),e("p",[_._v("原子性是指事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("一致性（consistency）：")])])]),_._v(" "),e("p",[_._v("一致性是指事务执行前后，数据从一个"),e("code",[_._v("合法性状态")]),_._v("变换到另外一个"),e("code",[_._v("合法性状态")]),_._v("。这种状态是"),e("code",[_._v("语义上")]),_._v("的而不是语法上的，跟具体的业务有关。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("隔离型（isolation）：")])])]),_._v(" "),e("p",[_._v("事务的隔离性是指一个事务的执行"),e("code",[_._v("不能被其他事务干扰")]),_._v("，即一个事务内部的操作及使用的数据对"),e("code",[_._v("并发")]),_._v("的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("持久性（durability）：")])])]),_._v(" "),e("p",[_._v("持久性是指一个事务一旦被提交，它对数据库中数据的改变就是"),e("code",[_._v("永久性的")]),_._v("，接下来的其他操作和数据库故障不应该对其有任何影响。")]),_._v(" "),e("p",[_._v("持久性是通过"),e("code",[_._v("事务日志")]),_._v("来保证的。日志包括了"),e("code",[_._v("重做日志")]),_._v("和"),e("code",[_._v("回滚日志")]),_._v("。当我们通过事务对数据进行修改的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。这样做的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执行，从而使事务具有持久性。")]),_._v(" "),e("h3",{attrs:{id:"_1-3-事务的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-事务的状态"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.3")]),_._v(" "),e("strong",[_._v("事务的状态")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("活动的（active）")])])]),_._v(" "),e("p",[_._v("事务对应的数据库操作正在执行过程中时，我们就说该事务处在"),e("code",[_._v("活动的")]),_._v("状态。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("部分提交的（partially committed）")])])]),_._v(" "),e("p",[_._v("当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并"),e("code",[_._v("没有刷新到磁盘")]),_._v("时，我们就说该事务处在"),e("code",[_._v("部分提交的")]),_._v("状态。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("失败的（failed）")])])]),_._v(" "),e("p",[_._v("当事务处在"),e("code",[_._v("活动的")]),_._v("或者"),e("code",[_._v("部分提交的")]),_._v("状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在"),e("code",[_._v("失败的")]),_._v("状态。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("中止的（aborted）")])])]),_._v(" "),e("p",[_._v("如果事务执行了一部分而变为"),e("code",[_._v("失败的")]),_._v("状态，那么就需要把已经修改的事务中的操作还原到事务执行前的状态。换句话说，就是要撤销失败事务对当前数据库造成的影响。我们把这个撤销的过程称之为"),e("code",[_._v("回滚")]),_._v("。当"),e("code",[_._v("回滚")]),_._v("操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了"),e("code",[_._v("中止的")]),_._v("状态。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("提交的（committed）")])])]),_._v(" "),e("p",[_._v("当一个处在"),e("code",[_._v("部分提交的")]),_._v("状态的事务将修改过的数据都"),e("code",[_._v("同步到磁盘")]),_._v("上之后，我们就可以说该事务处在了"),e("code",[_._v("提交的")]),_._v("状态。")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031104063.png",alt:"image-20220403110448951"}})]),_._v(" "),e("h2",{attrs:{id:"_2-如何使用事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何使用事务"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("如何使用事务")])]),_._v(" "),e("h3",{attrs:{id:"_2-1-显式事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-显式事务"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.1")]),_._v(" "),e("strong",[_._v("显式事务")])]),_._v(" "),e("p",[e("strong",[_._v("步骤1：")]),_._v(" "),e("code",[_._v("START TRANSACTION")]),_._v("或者"),e("code",[_._v("BEGIN")]),_._v("，作用是显式开启一个事务。")]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("mysql> BEGIN; \n#或者 \nmysql> START TRANSACTION;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br")])]),e("p",[e("code",[_._v("START TRANSACTION")]),_._v("语句相较于"),e("code",[_._v("BEGIN")]),_._v("特别之处在于，后边能跟随几个"),e("code",[_._v("修饰符")]),_._v("：")]),_._v(" "),e("p",[_._v("①"),e("code",[_._v("READ ONLY")]),_._v("：标识当前事务是一个"),e("code",[_._v("只读事务")]),_._v("，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。")]),_._v(" "),e("p",[_._v("②"),e("code",[_._v("READ WRITE")]),_._v("：标识当前事务是一个"),e("code",[_._v("读写事务")]),_._v("，也就是属于该事务的数据库操作既可以读取数据，也可以修改数据。")]),_._v(" "),e("p",[_._v("③"),e("code",[_._v("WITH CONSISTENT SNAPSHOT")]),_._v("：启动一致性读。")]),_._v(" "),e("p",[_._v("**步骤2：**一系列事务中的操作（主要是DML，不含DDL）")]),_._v(" "),e("p",[_._v("**步骤3：**提交事务 或 中止事务（即回滚事务）")]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("# 提交事务。当提交事务后，对数据库的修改是永久性的。\nmysql> COMMIT;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("# 回滚事务。即撤销正在进行的所有没有提交的修改 \nmysql> ROLLBACK; \n\n# 将事务回滚到某个保存点。 \nmysql> ROLLBACK TO [SAVEPOINT]\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br")])]),e("p",[_._v("其中关于SAVEPOINT相关操作有：")]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("# 在事务中创建保存点，方便后续针对保存点进行回滚。一个事物中可以存在多个保存点。\nSAVEPOINT 保存点名称;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("# 删除某个保存点\nRELEASE SAVEPOINT 保存点名称;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("h3",{attrs:{id:"_2-2-隐式事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-隐式事务"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.2")]),_._v(" "),e("strong",[_._v("隐式事务")])]),_._v(" "),e("ul",[e("li",[_._v("显式的的使用"),e("code",[_._v("START TRANSACTION")]),_._v("或者"),e("code",[_._v("BEGIN")]),_._v("语句开启一个事务。这样在本次事务提交或者回滚前会暂时关闭掉自动提交的功能。")]),_._v(" "),e("li",[_._v("把系统变量"),e("code",[_._v("autocommit")]),_._v("的值设置为"),e("code",[_._v("OFF")])])]),_._v(" "),e("h3",{attrs:{id:"_2-3-隐式提交数据的情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-隐式提交数据的情况"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.3")]),_._v(" "),e("strong",[_._v("隐式提交数据的情况")])]),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("数据定义语言（Data definition language，缩写为：DDL）")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("隐式使用或修改mysql数据库中的表")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("事务控制或关于锁定的语句")])]),_._v(" "),e("ul",[e("li",[_._v("当我们在一个事务还没提交或者回滚时就又使用"),e("code",[_._v("START TRANSACTION")]),_._v("或者"),e("code",[_._v("BEGIN")]),_._v("语句开启了另一个事务时，会"),e("code",[_._v("隐式的提交")]),_._v("上一个事务。")]),_._v(" "),e("li",[_._v("当前的"),e("code",[_._v("autocommit")]),_._v("系统变量的值为"),e("code",[_._v("OFF")]),_._v("，我们手动把它调为"),e("code",[_._v("ON")]),_._v("时，也会"),e("code",[_._v("隐式的提交")]),_._v("前边语句所属的事务。")]),_._v(" "),e("li",[_._v("使用"),e("code",[_._v("LOCK TABLES")]),_._v("、"),e("code",[_._v("UNLOCK TABLES")]),_._v("等关于锁定的语句也会"),e("code",[_._v("隐式的提交")]),_._v("前边语句所属的事务。")])])])]),_._v(" "),e("h2",{attrs:{id:"_3-事务隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-事务隔离级别"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("事务隔离级别")])]),_._v(" "),e("h3",{attrs:{id:"_3-1-数据并发问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数据并发问题"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.1")]),_._v(" "),e("strong",[_._v("数据并发问题")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("脏写（")]),e("code",[_._v("Dirty Write")]),e("strong",[_._v("）")])]),_._v(" "),e("p",[_._v("对于两个事务 Session A、Session B，如果事务Session A"),e("code",[_._v("修改了")]),_._v("另一个"),e("code",[_._v("未提交")]),_._v("事务Session B"),e("code",[_._v("修改过")]),_._v("的数据，那就意味着发生了"),e("code",[_._v("脏写")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031124086.png",alt:"image-20220403112416944"}})]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("脏读（")]),e("code",[_._v("Dirty Read")]),e("strong",[_._v("）")])]),_._v(" "),e("p",[_._v("对于两个事务 Session A、Session B，Session A"),e("code",[_._v("读取")]),_._v("了已经被 Session B"),e("code",[_._v("更新")]),_._v("但还"),e("code",[_._v("没有被提交")]),_._v("的字段。之后若 Session B"),e("code",[_._v("回滚")]),_._v("，Session A"),e("code",[_._v("读取")]),_._v("的内容就是"),e("code",[_._v("临时且无效")]),_._v("的。")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031124136.png",alt:"image-20220403112435995"}})]),_._v(" "),e("p",[e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("不可重复读（")]),e("code",[_._v("Non-Repeatable Read")]),e("strong",[_._v("）")])]),_._v(" "),e("p",[_._v("对于两个事务Session A、Session B，Session A"),e("code",[_._v("读取")]),_._v("了一个字段，然后 Session B"),e("code",[_._v("更新")]),_._v("了该字段。 之后Session A"),e("code",[_._v("再次读取")]),_._v("同一个字段，"),e("code",[_._v("值就不同")]),_._v("了。那就意味着发生了不可重复读。")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031124331.png",alt:"image-20220403112458183"}})]),_._v(" "),e("p",[e("strong",[_._v("4.")]),_._v(" "),e("strong",[_._v("幻读（")]),e("code",[_._v("Phantom")]),e("strong",[_._v("）")])]),_._v(" "),e("p",[_._v("对于两个事务Session A、Session B, Session A 从一个表中"),e("code",[_._v("读取")]),_._v("了一个字段, 然后 Session B 在该表中"),e("code",[_._v("插入")]),_._v("了一些新的行。 之后, 如果 Session A"),e("code",[_._v("再次读取")]),_._v("同一个表, 就会多出几行。那就意味着发生了幻读。")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031125847.png",alt:"image-20220403112514712"}})]),_._v(" "),e("p",[e("strong",[_._v("注意1：")])]),_._v(" "),e("p",[_._v("有的同学会有疑问，那如果Session B中"),e("code",[_._v("剔除了")]),_._v("一些符合"),e("code",[_._v("studentno > 0")]),_._v("的记录而不是插入新记录，那么Session A之后再根据"),e("code",[_._v("studentno > 0")]),_._v("的条件读取的"),e("code",[_._v("记录变少了")]),_._v("，这种现象算不算"),e("code",[_._v("幻读")]),_._v("呢？这种现象"),e("code",[_._v("不属于幻读")]),_._v("，幻读强调的是一个事物按照某个"),e("code",[_._v("相同条件多次读取")]),_._v("记录时，后读取时读到了之前"),e("code",[_._v("没有读到的记录")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("注意2：")])]),_._v(" "),e("p",[_._v("那对于先前已经读到的记录，之后又读取不到这种情况，算啥呢？这相当于对每一条记录都发生了"),e("code",[_._v("不可重复读")]),_._v("的现象。幻读只是重点强调了读取到之前读取没有获取到的记录。")]),_._v(" "),e("h3",{attrs:{id:"_3-2-sql中的四种隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-sql中的四种隔离级别"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.2 SQL中的四种隔离级别")])]),_._v(" "),e("p",[e("code",[_._v("SQL标准")]),_._v("中设立了4个"),e("code",[_._v("隔离级别")]),_._v("：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("READ UNCOMMITTED")]),_._v("：读未提交，在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。不能避免脏读、不可重复读、幻读。")]),_._v(" "),e("li",[e("code",[_._v("READ COMMITTED")]),_._v("：读已提交，它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。可以避免脏读，但不可重复读、幻读问题仍然存在。")]),_._v(" "),e("li",[e("code",[_._v("REPEATABLE READ")]),_._v("：可重复读，事务A在读到一条数据之后，此时事务B对该数据进行了修改并提交，那么事务A再读该数据，读到的还是原来的内容。可以避免脏读、不可重复读，但幻读问题仍然存在。"),e("code",[_._v("这是MySQL的默认隔离级别")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("SERIALIZABLE")]),_._v("：可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。所有的并发问题都可以避免，但性能十分低下。能避免脏读、不可重复读和幻读。")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031127542.png",alt:"image-20220403112740425"}})]),_._v(" "),e("h3",{attrs:{id:"_3-3-如何设置事务的隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-如何设置事务的隔离级别"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.3")]),_._v(" "),e("strong",[_._v("如何设置事务的隔离级别")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL 隔离级别; \n#其中，隔离级别格式： \n> READ UNCOMMITTED \n> READ COMMITTED \n> REPEATABLE READ \n> SERIALIZABLE\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br"),e("span",{staticClass:"line-number"},[_._v("6")]),e("br")])]),e("p",[_._v("或者：")]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("SET [GLOBAL|SESSION] TRANSACTION_ISOLATION = '隔离级别' \n#其中，隔离级别格式： \n> READ-UNCOMMITTED \n> READ-COMMITTED \n> REPEATABLE-READ \n> SERIALIZABLE\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br"),e("span",{staticClass:"line-number"},[_._v("6")]),e("br")])]),e("h1",{attrs:{id:"第3章-mysql事务日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第3章-mysql事务日志"}},[_._v("#")]),_._v(" 第3章 MySQL事务日志")]),_._v(" "),e("p",[_._v("事务有4种特性：原子性、一致性、隔离性和持久性。那么事务的四种特性到底是基于什么机制实现呢？")]),_._v(" "),e("ul",[e("li",[_._v("事务的隔离性由"),e("code",[_._v("锁机制")]),_._v("实现。")]),_._v(" "),e("li",[_._v("而事务的原子性、一致性和持久性由事务的 redo 日志和undo 日志来保证。\n"),e("ul",[e("li",[_._v("REDO LOG 称为"),e("code",[_._v("重做日志")]),_._v("，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的持久性。")]),_._v(" "),e("li",[_._v("UNDO LOG 称为"),e("code",[_._v("回滚日志")]),_._v("，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。")])])])]),_._v(" "),e("h2",{attrs:{id:"_1-redo日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-redo日志"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1. redo日志")])]),_._v(" "),e("h3",{attrs:{id:"_1-1-为什么需要redo日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-为什么需要redo日志"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.1")]),_._v(" "),e("strong",[_._v("为什么需要REDO日志")])]),_._v(" "),e("p",[_._v("一方面，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟，checkpoint机制可以保证数据的最终落盘，然而由于checkpoint"),e("code",[_._v("并不是每次变更的时候就触发")]),_._v("的，而是master线程隔一段时间去处理的。所以最坏的情况就是事务提交后，刚写完缓冲池，数据库宕机了，那么这段数据就是丢失的，无法恢复。")]),_._v(" "),e("p",[_._v("另一方面，事务包含"),e("code",[_._v("持久性")]),_._v("的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。")]),_._v(" "),e("p",[_._v("那么如何保证这个持久性呢？"),e("code",[_._v("一个简单的做法")]),_._v("：在事务提交完成之前把该事务所修改的所有页面都刷新到磁盘，但是这个简单粗暴的做法有些问题")]),_._v(" "),e("p",[e("code",[_._v("另一个解决的思路")]),_._v("：我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。所以我们其实没有必要在每次事务提交时就把该事务在内存中修改过的全部页面刷新到磁盘，只需要把"),e("code",[_._v("修改")]),_._v("了哪些东西"),e("code",[_._v("记录一下")]),_._v("就好。比如，某个事务将系统表空间中"),e("code",[_._v("第10号")]),_._v("页面中偏移量为"),e("code",[_._v("100")]),_._v("处的那个字节的值"),e("code",[_._v("1")]),_._v("改成"),e("code",[_._v("2")]),_._v("。我们只需要记录一下：将第0号表空间的10号页面的偏移量为100处的值更新为 2 。")]),_._v(" "),e("h3",{attrs:{id:"_1-2-redo日志的好处、特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-redo日志的好处、特点"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.2 REDO日志的好处、特点")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("好处")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("redo日志降低了刷盘频率")])]),_._v(" "),e("li",[e("strong",[_._v("redo日志占用的空间非常小")])])]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("特点")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("redo日志是顺序写入磁盘的")])]),_._v(" "),e("li",[e("strong",[_._v("事务执行过程中，redo log不断记录")])])]),_._v(" "),e("h3",{attrs:{id:"_1-3-redo的组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-redo的组成"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.3 redo的组成")])]),_._v(" "),e("p",[_._v("Redo log可以简单分为以下两个部分：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("重做日志的缓冲 (redo log buffer)")]),_._v("，保存在内存中，是易失的。")])]),_._v(" "),e("p",[e("strong",[_._v("参数设置：innodb_log_buffer_size：")])]),_._v(" "),e("p",[_._v("redo log buffer 大小，默认"),e("code",[_._v("16M")]),_._v("，最大值是4096M，最小值为1M。")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("重做日志文件 (redo log file)")]),_._v("，保存在硬盘中，是持久的。")])]),_._v(" "),e("h3",{attrs:{id:"_1-4-redo的整体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-redo的整体流程"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.4 redo的整体流程")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031147714.png",alt:"image-20220403114709581"}})]),_._v(" "),e("p",[_._v("第1步：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝")]),_._v(" "),e("p",[_._v("第2步：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值")]),_._v(" "),e("p",[_._v("第3步：当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加写的方式")]),_._v(" "),e("p",[_._v("第4步：定期将内存中修改的数据刷新到磁盘中")]),_._v(" "),e("blockquote",[e("p",[_._v("Write-Ahead Log(预先日志持久化)：在持久化一个数据页之前，先将内存中相应的日志页持久化。")])]),_._v(" "),e("h3",{attrs:{id:"_1-5-redo-log的刷盘策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-redo-log的刷盘策略"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.5 redo log的刷盘策略")])]),_._v(" "),e("p",[_._v("redo log buffer刷盘到redo log file的过程并不是真正的刷到磁盘中去，只是刷入到"),e("code",[_._v("文件系统缓存")]),_._v("（page cache）中去（这是现代操作系统为了提高文件写入效率做的一个优化），真正的写入会交给系统自己来决定（比如page cache足够大了）。那么对于InnoDB来说就存在一个问题，如果交给系统来同步，同样如果系统宕机，那么数据也丢失了（虽然整个系统宕机的概率还是比较小的）。")]),_._v(" "),e("p",[_._v("针对这种情况，InnoDB给出"),e("code",[_._v("innodb_flush_log_at_trx_commit")]),_._v("参数，该参数控制 commit提交事务时，如何将 redo log buffer 中的日志刷新到 redo log file 中。它支持三种策略：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("设置为0")]),_._v("：表示每次事务提交时不进行刷盘操作。（系统默认master thread每隔1s进行一次重做日志的同步）")]),_._v(" "),e("li",[e("code",[_._v("设置为1")]),_._v("：表示每次事务提交时都将进行同步，刷盘操作（"),e("code",[_._v("默认值")]),_._v("）")]),_._v(" "),e("li",[e("code",[_._v("设置为2")]),_._v("：表示每次事务提交时都只把 redo log buffer 内容写入 page cache，不进行同步。由os自己决定什么时候同步到磁盘文件。")])]),_._v(" "),e("h3",{attrs:{id:"_1-6-不同刷盘策略演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-不同刷盘策略演示"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.6")]),_._v(" "),e("strong",[_._v("不同刷盘策略演示")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("流程图")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031152952.png",alt:"image-20220403115232833"}})]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031152607.png",alt:"image-20220403115249492"}})]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204031153931.png",alt:"image-20220403115300809"}})]),_._v(" "),e("h3",{attrs:{id:"_1-7-写入redo-log-buffer过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-写入redo-log-buffer过程"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.7")]),_._v(" "),e("strong",[_._v("写入redo log buffer过程")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("补充概念：Mini-Transaction")])]),_._v(" "),e("p",[_._v("一个事务可以包含若干条语句，每一条语句其实是由若干个"),e("code",[_._v("mtr")]),_._v("组成，每一个"),e("code",[_._v("mtr")]),_._v("又可以包含若干条redo日志")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040912119.png",alt:"image-20220404091224993"}})]),_._v(" "),e("p",[e("strong",[_._v("2. redo")]),_._v(" "),e("strong",[_._v("日志写入log buffer")])]),_._v(" "),e("p",[_._v("不同的事务可能是"),e("code",[_._v("并发")]),_._v("执行的，所以"),e("code",[_._v("事务T1")]),_._v("、"),e("code",[_._v("事务T2")]),_._v("之间的"),e("code",[_._v("mtr")]),_._v("可能是"),e("code",[_._v("交替执行")]),_._v("的。")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040915708.png",alt:"image-20220404091511602"}})]),_._v(" "),e("h3",{attrs:{id:"_1-8-redo-log-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-redo-log-file"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.8 redo log file")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("相关参数设置")])]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("innodb_log_group_home_dir")]),_._v("：指定 redo log 文件组所在的路径，默认值为"),e("code",[_._v("./")]),_._v("，表示在数据库的数据目录下。MySQL的默认数据目录（"),e("code",[_._v("var/lib/mysql")]),_._v("）下默认有两个名为"),e("code",[_._v("ib_logfile0")]),_._v("和"),e("code",[_._v("ib_logfile1")]),_._v("的文件，log buffer中的日志默认情况下就是刷新到这两个磁盘文件中。此redo日志文件位置还可以修改。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("innodb_log_files_in_group")]),_._v("：指明redo log file的个数，命名方式如：ib_logfile0，ib_logfile1... ib_logfilen。默认2个，最大100个。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("innodb_flush_log_at_trx_commit")]),_._v("：控制 redo log 刷新到磁盘的策略，默认为"),e("code",[_._v("1")]),_._v("。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("innodb_log_file_size")]),_._v("：单个 redo log 文件设置大小，默认值为 48M 。最大值为512G，注意最大值指的是整个 redo log 系列文件之和，即（innodb_log_files_in_group * innodb_log_file_size ）不能大于最大值512G。")])])]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("日志文件组")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040920532.png",alt:"image-20220404092038421"}})]),_._v(" "),e("p",[e("strong",[_._v("3. checkpoint")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040921715.png",alt:"image-20220404092106617"}})]),_._v(" "),e("p",[_._v("如果 write pos 追上 checkpoint ，表示"),e("strong",[_._v("日志文件组")]),_._v("满了，这时候不能再写入新的 redo log记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。")]),_._v(" "),e("h2",{attrs:{id:"_2-undo日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-undo日志"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2. Undo日志")])]),_._v(" "),e("p",[_._v("redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中"),e("code",[_._v("更新数据")]),_._v("的"),e("code",[_._v("前置操作")]),_._v("其实是要先写入一个 undo log 。")]),_._v(" "),e("h3",{attrs:{id:"_2-1-如何理解undo日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-如何理解undo日志"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.1")]),_._v(" "),e("strong",[_._v("如何理解Undo日志")])]),_._v(" "),e("p",[_._v("事务需要保证"),e("code",[_._v("原子性")]),_._v("，也就是事务中的操作要么全部完成，要么什么也不做。但有时候事务执行到一半会出现一些情况，比如：")]),_._v(" "),e("ul",[e("li",[_._v("情况一：事务执行过程中可能遇到各种错误，比如"),e("code",[_._v("服务器本身的错误")]),_._v("，"),e("code",[_._v("操作系统错误")]),_._v("，甚至是突然"),e("code",[_._v("断电")]),_._v("导致的错误。")]),_._v(" "),e("li",[_._v("情况二：程序员可以在事务执行过程中手动输入"),e("code",[_._v("ROLLBACK")]),_._v("语句结束当前事务的执行。")])]),_._v(" "),e("p",[_._v("以上情况出现，我们需要把数据改回原先的样子，这个过程称之为"),e("code",[_._v("回滚")]),_._v("，这样就可以造成一个假象：这个事务看起来什么都没做，所以符合"),e("code",[_._v("原子性")]),_._v("要求。")]),_._v(" "),e("h3",{attrs:{id:"_2-2-undo日志的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-undo日志的作用"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.2 Undo日志的作用")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("作用1：回滚数据")])]),_._v(" "),e("li",[e("strong",[_._v("作用2：MVCC（详情看第16章）")])])]),_._v(" "),e("h3",{attrs:{id:"_2-3-undo的存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-undo的存储结构"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.3 undo的存储结构")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("回滚段与undo页")])]),_._v(" "),e("p",[_._v("InnoDB对undo log的管理采用段的方式，也就是"),e("code",[_._v("回滚段（rollback segment）")]),_._v("。每个回滚段记录了"),e("code",[_._v("1024")]),_._v("个"),e("code",[_._v("undo log segment")]),_._v("，而在每个undo log segment段中进行"),e("code",[_._v("undo页")]),_._v("的申请。")]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("回滚段与事务")])]),_._v(" "),e("ol",[e("li",[e("p",[_._v("每个事务只会使用一个回滚段，一个回滚段在同一时刻可能会服务于多个事务。")])]),_._v(" "),e("li",[e("p",[_._v("当一个事务开始的时候，会制定一个回滚段，在事务进行的过程中，当数据被修改时，原始的数据会被复制到回滚段。")])]),_._v(" "),e("li",[e("p",[_._v("在回滚段中，事务会不断填充盘区，直到事务结束或所有的空间被用完。如果当前的盘区不够用，事务会在段中请求扩展下一个盘区，如果所有已分配的盘区都被用完，事务会覆盖最初的盘区或者在回滚段允许的情况下扩展新的盘区来使用。")])]),_._v(" "),e("li",[e("p",[_._v("回滚段存在于undo表空间中，在数据库中可以存在多个undo表空间，但同一时刻只能使用一个undo表空间。")])]),_._v(" "),e("li",[e("p",[_._v("当事务提交时，InnoDB存储引擎会做以下两件事情：")]),_._v(" "),e("ul",[e("li",[_._v("将undo log放入列表中，以供之后的purge操作")]),_._v(" "),e("li",[_._v("判断undo log所在的页是否可以重用，若可以分配给下个事务使用")])])])]),_._v(" "),e("p",[e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("回滚段中的数据分类")])]),_._v(" "),e("ol",[e("li",[e("p",[_._v("未提交的回滚数据(uncommitted undo information)")])]),_._v(" "),e("li",[e("p",[_._v("已经提交但未过期的回滚数据(committed undo information)")])]),_._v(" "),e("li",[e("p",[_._v("事务已经提交并过期的数据(expired undo information)")])])]),_._v(" "),e("h3",{attrs:{id:"_2-4-undo的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-undo的类型"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.4 undo的类型")])]),_._v(" "),e("p",[_._v("在InnoDB存储引擎中，undo log分为：")]),_._v(" "),e("ul",[e("li",[_._v("insert undo log")]),_._v(" "),e("li",[_._v("update undo log")])]),_._v(" "),e("h3",{attrs:{id:"_2-5-undo-log的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-undo-log的生命周期"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.5 undo log的生命周期")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("简要生成过程")])]),_._v(" "),e("p",[e("strong",[_._v("只有Buffer Pool的流程：")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040937761.png",alt:"image-20220404093706650"}})]),_._v(" "),e("p",[e("strong",[_._v("有了Redo Log和Undo Log之后：")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040938657.png",alt:"image-20220404093832512"}})]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("详细生成过程")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040939231.png",alt:"image-20220404093950136"}})]),_._v(" "),e("p",[e("strong",[_._v("当我们执行INSERT时：")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('begin; \nINSERT INTO user (name) VALUES ("tom");\n')])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040940543.png",alt:"image-20220404094033441"}})]),_._v(" "),e("p",[e("strong",[_._v("当我们执行UPDATE时：")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040941624.png",alt:"image-20220404094105525"}})]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("UPDATE user SET id=2 WHERE id=1;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040941449.png",alt:"image-20220404094142337"}})]),_._v(" "),e("p",[e("strong",[_._v("3. undo log是如何回滚的")])]),_._v(" "),e("p",[_._v("以上面的例子来说，假设执行rollback，那么对应的流程应该是这样：")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("通过undo no=3的日志把id=2的数据删除")])]),_._v(" "),e("li",[e("p",[_._v("通过undo no=2的日志把id=1的数据的deletemark还原成0")])]),_._v(" "),e("li",[e("p",[_._v("通过undo no=1的日志把id=1的数据的name还原成Tom")])]),_._v(" "),e("li",[e("p",[_._v("通过undo no=0的日志把id=1的数据删除")])])]),_._v(" "),e("p",[e("strong",[_._v("4. undo log的删除")])]),_._v(" "),e("ul",[e("li",[_._v("针对于insert undo log")])]),_._v(" "),e("p",[_._v("因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。")]),_._v(" "),e("ul",[e("li",[_._v("针对于update undo log")])]),_._v(" "),e("p",[_._v("该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。")]),_._v(" "),e("h3",{attrs:{id:"_2-6-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-小结"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.6")]),_._v(" "),e("strong",[_._v("小结")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204040944948.png",alt:"image-20220404094436830"}})]),_._v(" "),e("p",[_._v("undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。")]),_._v(" "),e("p",[_._v("redo log是物理日志，记录的是数据页的物理变化，undo log不是redo log的逆过程。")]),_._v(" "),e("h1",{attrs:{id:"第4章-锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第4章-锁"}},[_._v("#")]),_._v(" 第4章 锁")]),_._v(" "),e("h2",{attrs:{id:"_1-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" "),e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("概述")])]),_._v(" "),e("p",[_._v("在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对"),e("code",[_._v("并发操作进行控制")]),_._v("，因此产生了"),e("code",[_._v("锁")]),_._v("。同时"),e("code",[_._v("锁机制")]),_._v("也为实现MySQL的各个隔离级别提供了保证。 锁冲突 也是影响数据库"),e("code",[_._v("并发访问性能")]),_._v("的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。")]),_._v(" "),e("h3",{attrs:{id:"_2-mysql并发事务访问相同记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-mysql并发事务访问相同记录"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2. MySQL并发事务访问相同记录")])]),_._v(" "),e("h3",{attrs:{id:"_2-1-读-读情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-读-读情况"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.1")]),_._v(" "),e("strong",[_._v("读-读情况")])]),_._v(" "),e("p",[e("code",[_._v("读-读")]),_._v("情况，即并发事务相继"),e("code",[_._v("读取相同的记录")]),_._v("。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。")]),_._v(" "),e("h3",{attrs:{id:"_2-2-写-写情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-写-写情况"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.2")]),_._v(" "),e("strong",[_._v("写-写情况")])]),_._v(" "),e("p",[e("code",[_._v("写-写")]),_._v("情况，即并发事务相继对相同的记录做出改动。")]),_._v(" "),e("p",[_._v("在这种情况下会发生"),e("code",[_._v("脏写")]),_._v("的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们"),e("code",[_._v("排队执行")]),_._v("，这个排队的过程其实是通过"),e("code",[_._v("锁")]),_._v("来实现的。")]),_._v(" "),e("h3",{attrs:{id:"_2-3-读-写或写-读情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-读-写或写-读情况"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.3")]),_._v(" "),e("strong",[_._v("读-写或写-读情况")])]),_._v(" "),e("p",[e("code",[_._v("读-写")]),_._v("或"),e("code",[_._v("写-读")]),_._v("，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生"),e("code",[_._v("脏读")]),_._v("、"),e("code",[_._v("不可重复读")]),_._v("、"),e("code",[_._v("幻读")]),_._v("的问题。")]),_._v(" "),e("h3",{attrs:{id:"_2-4-并发问题的解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-并发问题的解决方案"}},[_._v("#")]),_._v(" "),e("strong",[_._v("2.4")]),_._v(" "),e("strong",[_._v("并发问题的解决方案")])]),_._v(" "),e("p",[_._v("怎么解决"),e("code",[_._v("脏读")]),_._v("、"),e("code",[_._v("不可重复读")]),_._v("、"),e("code",[_._v("幻读")]),_._v("这些问题呢？其实有两种可选的解决方案：")]),_._v(" "),e("ul",[e("li",[_._v("方案一：读操作利用多版本并发控制（"),e("code",[_._v("MVCC")]),_._v("，下章讲解），写操作进行"),e("code",[_._v("加锁")]),_._v("。")])]),_._v(" "),e("p",[_._v("所谓的"),e("code",[_._v("MVCC")]),_._v("，就是生成一个"),e("code",[_._v("ReadView")]),_._v("，通过ReadView找到符合条件的记录版本（历史版本由"),e("code",[_._v("undo日志")]),_._v("构建）。查询语句只能"),e("code",[_._v("读")]),_._v("到在生成ReadView之前"),e("code",[_._v("已提交事务所做的更改")]),_._v("，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而"),e("code",[_._v("写操作")]),_._v("肯定针对的是"),e("code",[_._v("最新版本的记录")]),_._v("，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，"),e("code",[_._v("读-写")]),_._v("操作并不冲突。")]),_._v(" "),e("blockquote",[e("p",[_._v("普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。")]),_._v(" "),e("ul",[e("li",[_._v("在"),e("code",[_._v("READ COMMITTED")]),_._v("隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一个ReadView，ReadView的存在本身就保证了"),e("code",[_._v("事务不可以读取到未提交的事务所做的更改")]),_._v("，也就是避免了脏读现象；")]),_._v(" "),e("li",[_._v("在"),e("code",[_._v("REPEATABLE READ")]),_._v("隔离级别下，一个事务在执行过程中只有"),e("code",[_._v("第一次执行SELECT操作")]),_._v("才会生成一个ReadView，之后的SELECT操作都"),e("code",[_._v("复用")]),_._v("这ReadView，这样也就避免了不可重复读和幻读的问题。")])])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("方案二：读、写操作都采用"),e("code",[_._v("加锁")]),_._v("的方式。")])]),_._v(" "),e("li",[e("p",[_._v("小结对比发现：")]),_._v(" "),e("ul",[e("li",[_._v("采用"),e("code",[_._v("MVCC")]),_._v("方式的话，"),e("code",[_._v("读-写")]),_._v("操作彼此并不冲突，"),e("code",[_._v("性能更高")]),_._v("。")]),_._v(" "),e("li",[_._v("采用"),e("code",[_._v("加锁")]),_._v("方式的话，"),e("code",[_._v("读-写")]),_._v("操作彼此需要"),e("code",[_._v("排队执行")]),_._v("，影响性能。")])])])]),_._v(" "),e("p",[_._v("一般情况下我们当然愿意采用"),e("code",[_._v("MVCC")]),_._v("来解决"),e("code",[_._v("读-写")]),_._v("操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用"),e("code",[_._v("加锁")]),_._v("的方式执行。")]),_._v(" "),e("h2",{attrs:{id:"_3-锁的不同角度分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-锁的不同角度分类"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("锁的不同角度分类")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204050933339.png",alt:"image-20220405093322184"}})]),_._v(" "),e("h3",{attrs:{id:"_3-1-从数据操作的类型划分-读锁、写锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-从数据操作的类型划分-读锁、写锁"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.1")]),_._v(" "),e("strong",[_._v("从数据操作的类型划分：读锁、写锁")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("读锁")]),_._v("：也称为"),e("code",[_._v("共享锁")]),_._v("、英文用"),e("code",[_._v("S")]),_._v("表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。")]),_._v(" "),e("li",[e("code",[_._v("写锁")]),_._v("：也称为"),e("code",[_._v("排他锁")]),_._v("、英文用"),e("code",[_._v("X")]),_._v("表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。")])]),_._v(" "),e("p",[e("strong",[_._v("需要注意的是对于")]),_._v(" "),e("strong",[_._v("InnoDB")]),_._v(" "),e("strong",[_._v("引擎来说，读锁和写锁可以加在表上，也可以加在行上。")])]),_._v(" "),e("p",[e("strong",[_._v("1. 锁定读")])]),_._v(" "),e("p",[_._v("在采用"),e("code",[_._v("加锁")]),_._v("方式解决"),e("code",[_._v("脏读")]),_._v("、"),e("code",[_._v("不可重复读")]),_._v("、"),e("code",[_._v("幻读")]),_._v("这些问题时，读取一条记录时需要获取该记录的"),e("code",[_._v("S锁")]),_._v("，其实是不严谨的，有时候需要在读取记录时就获取记录的"),e("code",[_._v("X锁")]),_._v("，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的"),e("code",[_._v("SELECT")]),_._v("语句格式：")]),_._v(" "),e("ul",[e("li",[_._v("对读取的记录加"),e("code",[_._v("S锁")]),_._v("：")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("SELECT ... LOCK IN SHARE MODE;\n# 或\nSELECT ... FOR SHARE; #(8.0新增语法)\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br")])]),e("ul",[e("li",[_._v("对读取的记录加"),e("code",[_._v("X锁")]),_._v("：")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("SELECT ... FOR UPDATE;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("p",[e("strong",[_._v("MySQL8.0新特性：")])]),_._v(" "),e("p",[_._v("在5.7及之前的版本，SELECT ... FOR UPDATE，如果获取不到锁，会一直等待，直到"),e("code",[_._v("innodb_lock_wait_timeout")]),_._v("超时。在8.0版本中，SELECT ... FOR UPDATE, SELECT ... FOR SHARE 添加"),e("code",[_._v("NOWAIT")]),_._v("、"),e("code",[_._v("SKIP LOCKED")]),_._v("语法，跳过锁等待，或者跳过锁定。")]),_._v(" "),e("ul",[e("li",[_._v("NOWAIT：如果查询的行已经加锁，会立即报错返回")]),_._v(" "),e("li",[_._v("SKIP LOCKED：如果查询的行已经加锁，只返回结果中不包含被锁定的行")])]),_._v(" "),e("p",[e("strong",[_._v("2. 写操作")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("DELETE")]),_._v("：对一条记录做DELETE操作的过程其实是先在"),e("code",[_._v("B+")]),_._v("树中定位到这条记录的位置，然后获取这条记录的"),e("code",[_._v("X锁")]),_._v("，再执行"),e("code",[_._v("delete mark")]),_._v("操作。")]),_._v(" "),e("li",[e("code",[_._v("UPDATE")]),_._v("：在对一条记录做UPDATE操作时分为三种情况：\n"),e("ul",[e("li",[_._v("情况1：未修改该记录的键值，并且被更新的列占用的存储空间在修改前后未发生变化。则先在"),e("code",[_._v("B+")]),_._v("树中定位到这条记录的位置，然后再获取一下记录的"),e("code",[_._v("X锁")]),_._v("，最后在原记录的位置进行修改操作。")]),_._v(" "),e("li",[_._v("情况2：未修改该记录的键值，并且至少有一个被更新的列占用的存储空间在修改前后发生变化。则先在"),e("code",[_._v("B+")]),_._v("树中定位到这条记录的位置，然后获取一下记录的"),e("code",[_._v("X锁")]),_._v("，将该记录彻底删除掉（就是把记录彻底移入垃圾链表），最后再插入一条新记录。新插入的记录由"),e("code",[_._v("INSERT")]),_._v("操作提供的"),e("code",[_._v("隐式锁")]),_._v("进行保护。")]),_._v(" "),e("li",[_._v("情况3：修改该记录的键值，则相当于在原记录上做"),e("code",[_._v("DELECT")]),_._v("操作之后再来一次"),e("code",[_._v("INSERT")]),_._v("操作。")])])]),_._v(" "),e("li",[e("code",[_._v("INSERT")]),_._v("：一般情况下，新插入一条记录的操作并不加锁，通过一种称之为"),e("code",[_._v("隐式锁")]),_._v("的结构来保护这条新插入的记录在本事务提交前不被别的事务访问。")])]),_._v(" "),e("h3",{attrs:{id:"_3-2-从数据操作的粒度划分-表级锁、页级锁、行锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-从数据操作的粒度划分-表级锁、页级锁、行锁"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.2")]),_._v(" "),e("strong",[_._v("从数据操作的粒度划分：表级锁、页级锁、行锁")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("表锁（Table Lock）")])]),_._v(" "),e("p",[_._v("该锁会锁定整张表，它是MySQL中最基本的锁策略，并"),e("code",[_._v("不依赖于存储引擎")]),_._v("，并且表锁是"),e("code",[_._v("开销最少")]),_._v("的策略。由于表级锁一次会将整个表锁定，所以可以很好的"),e("code",[_._v("避免死锁")]),_._v("的问题。当然，锁的粒度大所带来最大的负面影响就是出现锁资源争用的概率也会最高，导致"),e("code",[_._v("并发率大打折扣")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("① 表级别的S锁、X锁")])]),_._v(" "),e("p",[_._v("在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的"),e("code",[_._v("S锁")]),_._v("或者"),e("code",[_._v("X锁")]),_._v("的。在对某个表执行一些诸如"),e("code",[_._v("ALTER TABLE")]),_._v("、"),e("code",[_._v("DROP TABLE")]),_._v("这类的"),e("code",[_._v("DDL")]),_._v("语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行"),e("code",[_._v("DDL")]),_._v("语句也会发生阻塞。这个过程其实是通过在"),e("code",[_._v("server层")]),_._v("使用一种称之为"),e("code",[_._v("元数据锁")]),_._v("（英文名："),e("code",[_._v("Metadata Locks")]),_._v("，简称"),e("code",[_._v("MDL")]),_._v("）结构来实现的。")]),_._v(" "),e("p",[_._v("一般情况下，不会使用InnoDB存储引擎提供的表级别的"),e("code",[_._v("S锁")]),_._v("和"),e("code",[_._v("X锁")]),_._v("。只会在一些特殊情况下，比方说"),e("code",[_._v("崩溃恢复")]),_._v("过程中用到。比如，在系统变量"),e("code",[_._v("autocommit=0，innodb_table_locks = 1")]),_._v("时，"),e("code",[_._v("手动")]),_._v("获取InnoDB存储引擎提供的表t 的"),e("code",[_._v("S锁")]),_._v("或者"),e("code",[_._v("X锁")]),_._v("可以这么写：")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("LOCK TABLES t READ")]),_._v("：InnoDB存储引擎会对表"),e("code",[_._v("t")]),_._v("加表级别的"),e("code",[_._v("S锁")]),_._v("。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("LOCK TABLES t WRITE")]),_._v("：InnoDB存储引擎会对表"),e("code",[_._v("t")]),_._v("加表级别的"),e("code",[_._v("X锁")]),_._v("。")])])]),_._v(" "),e("p",[_._v("总结：MyISAM在执行查询语句（SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。"),e("code",[_._v("InnoDB")]),_._v("存储引擎是不会为这个表添加表级别的"),e("code",[_._v("读锁")]),_._v("或者"),e("code",[_._v("写锁")]),_._v("的。")]),_._v(" "),e("p",[e("strong",[_._v("② 意向锁 （intention lock）")])]),_._v(" "),e("p",[_._v("InnoDB 支持"),e("code",[_._v("多粒度锁（multiple granularity locking）")]),_._v("，它允许"),e("code",[_._v("行级锁")]),_._v("与"),e("code",[_._v("表级锁")]),_._v("共存，而"),e("strong",[_._v("意向锁")]),_._v("就是其中的一种"),e("code",[_._v("表锁")]),_._v("。")]),_._v(" "),e("p",[_._v("1、意向锁的存在是为了协调行锁和表锁的关系，支持多粒度（表锁与行锁）的锁并存。")]),_._v(" "),e("p",[_._v("2、意向锁是一种"),e("code",[_._v("不与行级锁冲突的表级锁")]),_._v("，这一点非常重要。")]),_._v(" "),e("p",[_._v("3、表明“某个事务正在某些行持有了锁或该事务准备去持有锁”")]),_._v(" "),e("p",[_._v("意向锁分为两种：")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("意向共享锁")]),_._v("（intention shared lock, IS）：事务有意向对表中的某些行加"),e("strong",[_._v("共享锁")]),_._v("（S锁）")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。 \nSELECT column FROM table ... LOCK IN SHARE MODE;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("ul",[e("li",[e("strong",[_._v("意向排他锁")]),_._v("（intention exclusive lock, IX）：事务有意向对表中的某些行加"),e("strong",[_._v("排他锁")]),_._v("（X锁）")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。 \nSELECT column FROM table ... FOR UPDATE;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("p",[_._v("即：意向锁是由存储引擎"),e("code",[_._v("自己维护的")]),_._v("，用户无法手动操作意向锁，在为数据行加共享 / 排他锁之前，InooDB 会先获取该数据行"),e("code",[_._v("所在数据表的对应意向锁")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("1. 意向锁要解决的问题")])]),_._v(" "),e("p",[_._v("现在有两个事务，分别是T1和T2，其中T2试图在该表级别上应用共享或排它锁，如果没有意向锁存在，那么T2就需要去检查各个页或行是否存在锁；如果存在意向锁，那么此时就会受到由T1控制的"),e("code",[_._v("表级别意向锁的阻塞")]),_._v("。T2在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。简单来说就是给更大一级级别的空间示意里面是否已经上过锁。")]),_._v(" "),e("p",[_._v("在数据表的场景中，"),e("strong",[_._v("如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表已经有人上过排它锁了")]),_._v("，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排它锁即可。")]),_._v(" "),e("ul",[e("li",[_._v("如果事务想要获取数据表中某些记录的共享锁，就需要在数据表上"),e("code",[_._v("添加意向共享锁")])]),_._v(" "),e("li",[_._v("如果事务想要获取数据表中某些记录的排它锁，就需要在数据表上"),e("code",[_._v("添加意向排他锁")])])]),_._v(" "),e("p",[_._v("这时，意向锁会告诉其他事务已经有人锁定了表中的某些记录。")]),_._v(" "),e("p",[e("strong",[_._v("③ 自增锁（AUTO-INC锁）")])]),_._v(" "),e("p",[e("strong",[_._v("1. “Simple inserts”")]),_._v(" "),e("strong",[_._v("（简单插入）")])]),_._v(" "),e("p",[_._v("可以"),e("code",[_._v("预先确定要插入的行数")]),_._v("（当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行"),e("code",[_._v("INSERT...VALUES()")]),_._v("和"),e("code",[_._v("REPLACE")]),_._v("语句。")]),_._v(" "),e("p",[e("strong",[_._v("2. “Bulk inserts”")]),_._v(" "),e("strong",[_._v("（批量插入）")])]),_._v(" "),e("p",[e("code",[_._v("事先不知道要插入的行数")]),_._v("（和所需自动递增值的数量）的语句。比如"),e("code",[_._v("INSERT ... SELECT")]),_._v("，"),e("code",[_._v("REPLACE ... SELECT")]),_._v("和"),e("code",[_._v("LOAD DATA")]),_._v("语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列分配一个新值。")]),_._v(" "),e("p",[e("strong",[_._v("3. “Mixed-mode inserts”")]),_._v(" "),e("strong",[_._v("（混合模式插入）")])]),_._v(" "),e("p",[_._v("这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如"),e("code",[_._v("INSERT INTO teacher (id,name) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');")]),_._v("只是指定了部分id的值。另一种类型的“混合模式插入”是"),e("code",[_._v("INSERT ... ON DUPLICATE KEY UPDATE")]),_._v("。")]),_._v(" "),e("p",[_._v("对于上面数据插入的案例，MySQL采用了"),e("code",[_._v("自增锁")]),_._v("的方式来实现，"),e("strong",[_._v("AUTO-INT锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁")]),_._v("，在执行插入语句时就在表级别加一个AUTO-INT锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INT锁释放掉。"),e("strong",[_._v("一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞")]),_._v("，可以保证一个语句中分配的递增值是连续的。也正因为此，其并发性显然并不高，"),e("strong",[_._v("当我们向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争")]),_._v("，这样的并发潜力其实是很低下的，所以innodb通过"),e("code",[_._v("innodb_autoinc_lock_mode")]),_._v("的不同取值来提供不同的锁定机制，来显著提高SQL语句的可伸缩性和性能。")]),_._v(" "),e("p",[_._v("innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：")]),_._v(" "),e("p",[e("code",[_._v("（1）innodb_autoinc_lock_mode = 0(“传统”锁定模式)")])]),_._v(" "),e("p",[_._v("在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的时候，对于AUTO-INC锁的争夺会"),e("code",[_._v("限制并发")]),_._v("能力。")]),_._v(" "),e("p",[e("code",[_._v("（2）innodb_autoinc_lock_mode = 1(“连续”锁定模式)")])]),_._v(" "),e("p",[_._v("在 MySQL 8.0 之前，连续锁定模式是"),e("code",[_._v("默认")]),_._v("的。")]),_._v(" "),e("p",[_._v("在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT ... SELECT，REPLACE ... SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。")]),_._v(" "),e("p",[_._v("对于“Simple inserts”（要插入的行数事先已知），则通过在"),e("code",[_._v("mutex（轻量锁）")]),_._v("的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。")]),_._v(" "),e("p",[e("code",[_._v("（3）innodb_autoinc_lock_mode = 2(“交错”锁定模式)")])]),_._v(" "),e("p",[_._v("从 MySQL 8.0 开始，交错锁模式是"),e("code",[_._v("默认")]),_._v("设置。")]),_._v(" "),e("p",[_._v("在这种锁定模式下，所有类INSERT语句都不会使用表级AUTO-INC锁，并且可以同时执行多个语句。这是最快和最可拓展的锁定模式，但是当使用基于语句的复制或恢复方案时，"),e("strong",[_._v("从二进制日志重播SQL语句时，这是不安全的。")])]),_._v(" "),e("p",[_._v("在此锁定模式下，自动递增值"),e("code",[_._v("保证")]),_._v("在所有并发执行的所有类型的insert语句中是"),e("code",[_._v("唯一")]),_._v("且"),e("code",[_._v("单调递增")]),_._v("的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），"),e("strong",[_._v("为任何给定语句插入的行生成的值可能不是连续的。")])]),_._v(" "),e("p",[e("strong",[_._v("④ 元数据锁（MDL锁）")])]),_._v(" "),e("p",[_._v("MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL 的作用是，保证读写的正确性。比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个"),e("code",[_._v("表结构做变更")]),_._v("，增加了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。")]),_._v(" "),e("p",[_._v("因此，"),e("strong",[_._v("当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。")])]),_._v(" "),e("p",[e("strong",[_._v("2. InnoDB中的行锁")])]),_._v(" "),e("p",[_._v("行锁（Row Lock）也称为记录锁，顾名思义，就是锁住某一行（某条记录row）。需要注意的是，MySQL服务器层并没有实现行锁机制，"),e("strong",[_._v("行级锁只在存储引擎层实现。")])]),_._v(" "),e("p",[_._v("**优点：**锁定力度小，发生"),e("code",[_._v("锁冲突概率低")]),_._v("，可以实现的"),e("code",[_._v("并发度高")])]),_._v(" "),e("p",[_._v("**缺点：**对于"),e("code",[_._v("锁的开销比较大")]),_._v("，加锁会比较慢，容易出现"),e("code",[_._v("死锁")]),_._v("情况")]),_._v(" "),e("p",[_._v("InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。")]),_._v(" "),e("p",[e("strong",[_._v("① 记录锁（Record Locks）")])]),_._v(" "),e("p",[_._v("记录锁也就是仅仅把一条记录锁上，官方的类型名称为："),e("code",[_._v("LOCK_REC_NOT_GAP")]),_._v("。")]),_._v(" "),e("p",[_._v("记录锁是有S锁和X锁之分的，称之为"),e("code",[_._v("S型记录锁")]),_._v("和"),e("code",[_._v("X型记录锁")]),_._v("。")]),_._v(" "),e("ul",[e("li",[_._v("当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；")]),_._v(" "),e("li",[_._v("当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。")])]),_._v(" "),e("p",[e("strong",[_._v("② 间隙锁（Gap Locks）")])]),_._v(" "),e("p",[e("code",[_._v("MySQL")]),_._v("在"),e("code",[_._v("REPEATABLE READ")]),_._v("隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用"),e("code",[_._v("MVCC")]),_._v("方案解决，也可以采用"),e("code",[_._v("加锁")]),_._v("方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些"),e("code",[_._v("幻影记录")]),_._v("加上"),e("code",[_._v("记录锁")]),_._v("。InnoDB提出了一种称之为"),e("code",[_._v("Gap Locks")]),_._v("的锁，官方的类型名称为："),e("code",[_._v("LOCK_GAP")]),_._v("，我们可以简称为"),e("code",[_._v("gap锁")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("gap锁的提出仅仅是为了防止插入幻影记录而提出的")]),_._v("。虽然有"),e("code",[_._v("共享gap锁")]),_._v("和"),e("code",[_._v("独占gap锁")]),_._v("这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。")]),_._v(" "),e("p",[e("strong",[_._v("③ 临键锁（Next-Key Locks）")])]),_._v(" "),e("p",[_._v("有时候我们既想"),e("code",[_._v("锁住某条记录")]),_._v("，又想"),e("code",[_._v("阻止")]),_._v("其他事务在该记录前边的"),e("code",[_._v("间隙插入新记录")]),_._v("，所以InnoDB就提出了一种称之为"),e("code",[_._v("Next-Key Locks")]),_._v("的锁，官方的类型名称为："),e("code",[_._v("LOCK_ORDINARY")]),_._v("，我们也可以简称为"),e("code",[_._v("next-key锁")]),_._v("。Next-Key Locks是在存储引擎"),e("code",[_._v("innodb")]),_._v("、事务级别在"),e("code",[_._v("可重复读")]),_._v("的情况下使用的数据库锁，innodb默认的锁就是Next-Key locks。")]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("begin; \nselect * from student where id <=8 and id > 3 for update;\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br")])]),e("p",[e("strong",[_._v("④ 插入意向锁（Insert Intention Locks）")])]),_._v(" "),e("p",[_._v("我们说一个事务在"),e("code",[_._v("插入")]),_._v("一条记录时需要判断一下插入位置是不是被别的事务加了"),e("code",[_._v("gap锁")]),_._v("（"),e("code",[_._v("next-key锁")]),_._v("也包含"),e("code",[_._v("gap锁")]),_._v("），如果有的话，插入操作需要等待，直到拥有"),e("code",[_._v("gap锁")]),_._v("的那个事务提交。但是"),e("strong",[_._v("InnoDB规定事务在等待的时候也需要在内存中生成一个锁结构")]),_._v("，表明有事务想在某个"),e("code",[_._v("间隙")]),_._v("中"),e("code",[_._v("插入")]),_._v("新记录，但是现在在等待。InnoDB就把这种类型的锁命名为"),e("code",[_._v("Insert Intention Locks")]),_._v("，官方的类型名称为："),e("code",[_._v("LOCK_INSERT_INTENTION")]),_._v("，我们称为"),e("code",[_._v("插入意向锁")]),_._v("。插入意向锁是一种"),e("code",[_._v("Gap锁")]),_._v("，不是意向锁，在insert操作时产生。")]),_._v(" "),e("p",[_._v("插入意向锁是在插入一条记录行前，由"),e("code",[_._v("INSERT 操作产生的一种间隙锁")]),_._v("。")]),_._v(" "),e("p",[_._v("事实上"),e("strong",[_._v("插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。")])]),_._v(" "),e("p",[e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("页锁")])]),_._v(" "),e("p",[_._v("页锁就是在"),e("code",[_._v("页的粒度")]),_._v("上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。"),e("strong",[_._v("页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。")])]),_._v(" "),e("p",[_._v("每个层级的锁数量是有限制的，因为锁会占用内存空间，"),e("code",[_._v("锁空间的大小是有限的")]),_._v("。当某个层级的锁数量超过了这个层级的阈值时，就会进行"),e("code",[_._v("锁升级")]),_._v("。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。")]),_._v(" "),e("h3",{attrs:{id:"_3-3-从对待锁的态度划分-乐观锁、悲观锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-从对待锁的态度划分-乐观锁、悲观锁"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.3")]),_._v(" "),e("strong",[_._v("从对待锁的态度划分:乐观锁、悲观锁")])]),_._v(" "),e("p",[_._v("从对待锁的态度来看锁的话，可以将锁分成乐观锁和悲观锁，从名字中也可以看出这两种锁是两种看待"),e("code",[_._v("数据并发的思维方式")]),_._v("。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的"),e("code",[_._v("设计思想")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("悲观锁（Pessimistic Locking）")])]),_._v(" "),e("p",[_._v("悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会"),e("code",[_._v("阻塞")]),_._v("直到它拿到锁（"),e("strong",[_._v("共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程")]),_._v("）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中"),e("code",[_._v("synchronized")]),_._v("和"),e("code",[_._v("ReentrantLock")]),_._v("等独占锁就是悲观锁思想的实现。")]),_._v(" "),e("p",[_._v("注意："),e("strong",[_._v("select ... for update 语句执行过程中所有扫描的行都会被锁上，因此在MySQL中用悲观锁必须确定使用了索引，而不是全表扫描，否则将会把整个表锁住。")])]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("乐观锁（Optimistic Locking）")])]),_._v(" "),e("p",[_._v("乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是"),e("strong",[_._v("不采用数据库自身的锁机制，而是通过程序来实现")]),_._v("。在程序上，我们可以采用"),e("code",[_._v("版本号机制")]),_._v("或者"),e("code",[_._v("CAS机制")]),_._v("实现。"),e("strong",[_._v("乐观锁适用于多读的应用类型，这样可以提高吞吐量")]),_._v("。在Java中"),e("code",[_._v("java.util.concurrent.atomic")]),_._v("包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。")]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("乐观锁的版本号机制")])]),_._v(" "),e("p",[_._v("在表中设计一个"),e("code",[_._v("版本字段 version")]),_._v("，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行"),e("code",[_._v("UPDATE ... SET version=version+1 WHERE version=version")]),_._v("。此时如果已经有事务对这条数据进行了更改，修改就不会成功。")]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("乐观锁的时间戳机制")])]),_._v(" "),e("p",[_._v("时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行比较，如果两者一致则更新成功，否则就是版本冲突。")]),_._v(" "),e("p",[_._v("你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或者时间戳），从而证明当前拿到的数据是否最新。")]),_._v(" "),e("p",[e("strong",[_._v("3.")]),_._v(" "),e("strong",[_._v("两种锁的适用场景")])]),_._v(" "),e("p",[_._v("从这两种锁的设计思想中，我们总结一下乐观锁和悲观锁的适用场景：")]),_._v(" "),e("ol",[e("li",[e("p",[e("code",[_._v("乐观锁")]),_._v("适合"),e("code",[_._v("读操作多")]),_._v("的场景，相对来说写的操作比较少。它的优点在于"),e("code",[_._v("程序实现")]),_._v("，"),e("code",[_._v("不存在死锁")]),_._v("问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("悲观锁")]),_._v("适合"),e("code",[_._v("写操作多")]),_._v("的场景，因为写的操作具有"),e("code",[_._v("排它性")]),_._v("。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止"),e("code",[_._v("读 - 写")]),_._v("和"),e("code",[_._v("写 - 写")]),_._v("的冲突。")])])]),_._v(" "),e("h3",{attrs:{id:"_3-4-按加锁的方式划分-显式锁、隐式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-按加锁的方式划分-显式锁、隐式锁"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.4")]),_._v(" "),e("strong",[_._v("按加锁的方式划分：显式锁、隐式锁")])]),_._v(" "),e("p",[e("strong",[_._v("1.")]),_._v(" "),e("strong",[_._v("隐式锁")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("**情景一：**对于聚簇索引记录来说，有一个"),e("code",[_._v("trx_id")]),_._v("隐藏列，该隐藏列记录着最后改动该记录的"),e("code",[_._v("事务id")]),_._v("。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的"),e("code",[_._v("trx_id")]),_._v("隐藏列代表的的就是当前事务的"),e("code",[_._v("事务id")]),_._v("，如果其他事务此时想对该记录添加"),e("code",[_._v("S锁")]),_._v("或者"),e("code",[_._v("X锁")]),_._v("时，首先会看一下该记录的"),e("code",[_._v("trx_id")]),_._v("隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个"),e("code",[_._v("X锁")]),_._v("（也就是为当前事务创建一个锁结构，"),e("code",[_._v("is_waiting")]),_._v("属性是"),e("code",[_._v("false")]),_._v("），然后自己进入等待状态（也就是为自己也创建一个锁结构，"),e("code",[_._v("is_waiting")]),_._v("属性是"),e("code",[_._v("true")]),_._v("）。")])]),_._v(" "),e("li",[e("p",[_._v("**情景二：**对于二级索引记录来说，本身并没有"),e("code",[_._v("trx_id")]),_._v("隐藏列，但是在二级索引页面的"),e("code",[_._v("Page Header")]),_._v("部分有一个"),e("code",[_._v("PAGE_MAX_TRX_ID")]),_._v("属性，该属性代表对该页面做改动的最大的"),e("code",[_._v("事务id")]),_._v("，如果"),e("code",[_._v("PAGE_MAX_TRX_ID")]),_._v("属性值小于当前最小的活跃"),e("code",[_._v("事务id")]),_._v("，那么说明对该页面做修改的事务都已经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记录，然后再重复"),e("code",[_._v("情景一")]),_._v("的做法。")])])]),_._v(" "),e("p",[_._v("即：一个事务对新插入的记录可以不显示的加锁（生成一个锁结构），但是由于"),e("code",[_._v("事务id")]),_._v("的存在，相当于加了一个"),e("code",[_._v("隐式锁")]),_._v("。别的事务在对这条记录加"),e("code",[_._v("S锁")]),_._v("或者"),e("code",[_._v("X锁")]),_._v("时，由于"),e("code",[_._v("隐式锁")]),_._v("的存在，会先帮助当前事务生成一个锁结构，然后自己再生成一个锁结构后进入等待状态。隐式锁是一种"),e("code",[_._v("延迟加锁")]),_._v("的机制，从而来减少加锁的数量。")]),_._v(" "),e("p",[e("strong",[_._v("2.")]),_._v(" "),e("strong",[_._v("显式锁")])]),_._v(" "),e("p",[_._v("通过特定的语句进行加锁，我们一般称之为显示加锁。")]),_._v(" "),e("h3",{attrs:{id:"_3-5-其它锁之-全局锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-其它锁之-全局锁"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.5")]),_._v(" "),e("strong",[_._v("其它锁之：全局锁")])]),_._v(" "),e("p",[_._v("全局锁就是对"),e("code",[_._v("整个数据库实例")]),_._v("加锁。当你需要让整个库处于"),e("code",[_._v("只读状态")]),_._v("的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。全局锁的典型使用"),e("code",[_._v("场景")]),_._v("是：做"),e("code",[_._v("全库逻辑备份")]),_._v("。")]),_._v(" "),e("p",[_._v("全局锁的命令：")]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("Flush tables with read lock\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("h3",{attrs:{id:"_3-6-其它锁之-死锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-其它锁之-死锁"}},[_._v("#")]),_._v(" "),e("strong",[_._v("3.6")]),_._v(" "),e("strong",[_._v("其它锁之：死锁")])]),_._v(" "),e("p",[_._v("死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。")]),_._v(" "),e("p",[e("strong",[_._v("1. 如何处理死锁")])]),_._v(" "),e("p",[_._v("**方式1：**等待，直到超时（innodb_lock_wait_timeout=50s）")]),_._v(" "),e("p",[_._v("即当两个事务互相等待时，当一个事务等待时间超过设置的阈值时，就将其"),e("code",[_._v("回滚")]),_._v("，另外事务继续进行。")]),_._v(" "),e("p",[_._v("**方式2：**使用死锁检测进行死锁处理")]),_._v(" "),e("p",[_._v("发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务（将持有最少行级排他锁的事务进行回滚），让其他事务得以继续执行。")]),_._v(" "),e("h2",{attrs:{id:"_4-锁的内存结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-锁的内存结构"}},[_._v("#")]),_._v(" "),e("strong",[_._v("4.")]),_._v(" "),e("strong",[_._v("锁的内存结构")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204051514736.png",alt:"image-20220405151409557"}})]),_._v(" "),e("p",[_._v("结构解析：")]),_._v(" "),e("p",[e("code",[_._v("1. 锁所在的事务信息")]),_._v("：")]),_._v(" "),e("p",[_._v("不论是"),e("code",[_._v("表锁")]),_._v("还是"),e("code",[_._v("行锁")]),_._v("，都是在事务执行过程中生成的，哪个事务生成了这个 锁结构 ，这里就记录这个事务的信息。")]),_._v(" "),e("p",[_._v("此"),e("code",[_._v("锁所在的事务信息")]),_._v("在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。")]),_._v(" "),e("p",[e("code",[_._v("2. 索引信息")]),_._v("：")]),_._v(" "),e("p",[_._v("对于"),e("code",[_._v("行锁")]),_._v("来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。")]),_._v(" "),e("p",[e("code",[_._v("3. 表锁／行锁信息")]),_._v("：")]),_._v(" "),e("p",[e("code",[_._v("表锁结构")]),_._v("和"),e("code",[_._v("行锁结构")]),_._v("在这个位置的内容是不同的：")]),_._v(" "),e("ul",[e("li",[_._v("表锁：记载着是对哪个表加的锁，还有其他的一些信息。")]),_._v(" "),e("li",[_._v("行锁：记载了三个重要的信息：\n"),e("ul",[e("li",[_._v("Space ID ：记录所在表空间。")]),_._v(" "),e("li",[_._v("Page Number ：记录所在页号。")]),_._v(" "),e("li",[_._v("n_bits ：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个n_bits 属性代表使用了多少比特位。")])])])]),_._v(" "),e("blockquote",[e("p",[_._v("n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后也不至于重新分配锁结构")])]),_._v(" "),e("p",[e("code",[_._v("4. type_mode")]),_._v("：")]),_._v(" "),e("p",[_._v("这是一个32位的数，被分成了"),e("code",[_._v("lock_mode")]),_._v("、"),e("code",[_._v("lock_type")]),_._v("和"),e("code",[_._v("rec_lock_type")]),_._v("三个部分，如图所示：")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/aoshihuankong/cloudimg@master/img/202204051518659.png",alt:"image-20220405151829547"}})]),_._v(" "),e("ul",[e("li",[_._v("锁的模式（"),e("code",[_._v("lock_mode")]),_._v("），占用低4位，可选的值如下：\n"),e("ul",[e("li",[e("code",[_._v("LOCK_IS")]),_._v("（十进制的"),e("code",[_._v("0")]),_._v("）：表示共享意向锁，也就是"),e("code",[_._v("IS锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_IX")]),_._v("（十进制的"),e("code",[_._v("1")]),_._v("）：表示独占意向锁，也就是"),e("code",[_._v("IX锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_S")]),_._v("（十进制的"),e("code",[_._v("2")]),_._v("）：表示共享锁，也就是"),e("code",[_._v("S锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_X")]),_._v("（十进制的"),e("code",[_._v("3")]),_._v("）：表示独占锁，也就是"),e("code",[_._v("X锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_AUTO_INC")]),_._v("（十进制的"),e("code",[_._v("4")]),_._v("）：表示"),e("code",[_._v("AUTO-INC锁")]),_._v("。")])])])]),_._v(" "),e("p",[_._v("在InnoDB存储引擎中，LOCK_IS，LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和 LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式。")]),_._v(" "),e("ul",[e("li",[_._v("锁的类型（"),e("code",[_._v("lock_type")]),_._v("），占用第5～8位，不过现阶段只有第5位和第6位被使用：\n"),e("ul",[e("li",[e("code",[_._v("LOCK_TABLE")]),_._v("（十进制的"),e("code",[_._v("16")]),_._v("），也就是当第5个比特位置为1时，表示表级锁。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_REC")]),_._v("（十进制的"),e("code",[_._v("32")]),_._v("），也就是当第6个比特位置为1时，表示行级锁。")])])]),_._v(" "),e("li",[_._v("行锁的具体类型（"),e("code",[_._v("rec_lock_type")]),_._v("），使用其余的位来表示。只有在 "),e("code",[_._v("lock_type")]),_._v("的值为"),e("code",[_._v("LOCK_REC")]),_._v("时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：\n"),e("ul",[e("li",[e("code",[_._v("LOCK_ORDINARY")]),_._v("（十进制的"),e("code",[_._v("0")]),_._v("）：表示"),e("code",[_._v("next-key锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_GAP")]),_._v("（十进制的"),e("code",[_._v("512")]),_._v("）：也就是当第10个比特位置为1时，表示"),e("code",[_._v("gap锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_REC_NOT_GAP")]),_._v("（十进制的"),e("code",[_._v("1024")]),_._v("）：也就是当第11个比特位置为1时，表示正经"),e("code",[_._v("记录锁")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("LOCK_INSERT_INTENTION")]),_._v("（十进制的"),e("code",[_._v("2048")]),_._v("）：也就是当第12个比特位置为1时，表示插入意向锁。其他的类型：还有一些不常用的类型我们就不多说了。")])])]),_._v(" "),e("li",[e("code",[_._v("is_waiting")]),_._v("属性呢？基于内存空间的节省，所以把 is_waiting 属性放到了 type_mode 这个32位的数字中：\n"),e("ul",[e("li",[e("code",[_._v("LOCK_WAIT")]),_._v("（十进制的"),e("code",[_._v("256")]),_._v("） ：当第9个比特位置为"),e("code",[_._v("1")]),_._v("时，表示"),e("code",[_._v("is_waiting")]),_._v("为"),e("code",[_._v("true")]),_._v("，也就是当前事务尚未获取到锁，处在等待状态；当这个比特位为"),e("code",[_._v("0")]),_._v("时，表示"),e("code",[_._v("is_waiting")]),_._v("为"),e("code",[_._v("false")]),_._v("，也就是当前事务获取锁成功。")])])])]),_._v(" "),e("p",[e("code",[_._v("5. 其他信息")]),_._v("：")]),_._v(" "),e("p",[_._v("为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。")]),_._v(" "),e("p",[e("code",[_._v("6. 一堆比特位")]),_._v("：")]),_._v(" "),e("p",[_._v("如果是"),e("code",[_._v("行锁结构")]),_._v("的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的"),e("code",[_._v("n_bits")]),_._v("属性表示的。InnoDB数据页中的每条记录在"),e("code",[_._v("记录头信息")]),_._v("中都包含一个 heap_no 属性，伪记录"),e("code",[_._v("Infimum")]),_._v("的"),e("code",[_._v("heap_no")]),_._v("值为"),e("code",[_._v("0")]),_._v("，"),e("code",[_._v("Supremum")]),_._v("的"),e("code",[_._v("heap_no")]),_._v("值为"),e("code",[_._v("1")]),_._v("，之后每插入一条记录，"),e("code",[_._v("heap_no")]),_._v("值就增1。"),e("code",[_._v("锁结构")]),_._v("最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个"),e("code",[_._v("heap_no")]),_._v("，即一个比特位映射到页内的一条记录。")]),_._v(" "),e("h2",{attrs:{id:"_5-锁监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-锁监控"}},[_._v("#")]),_._v(" "),e("strong",[_._v("5.")]),_._v(" "),e("strong",[_._v("锁监控")])]),_._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("mysql> show status like 'innodb_row_lock%';\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("ul",[e("li",[_._v("Innodb_row_lock_current_waits：当前正在等待锁定的数量；")]),_._v(" "),e("li",[e("code",[_._v("Innodb_row_lock_time")]),_._v("：从系统启动到现在锁定总时间长度；（等待总时长）")]),_._v(" "),e("li",[e("code",[_._v("Innodb_row_lock_time_avg")]),_._v("：每次等待所花平均时间；（等待平均时长）")]),_._v(" "),e("li",[_._v("Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；")]),_._v(" "),e("li",[e("code",[_._v("Innodb_row_lock_waits")]),_._v("：系统启动后到现在总共等待的次数；（等待总次数）")])]),_._v(" "),e("p",[e("strong",[_._v("其他监控方法：")])]),_._v(" "),e("p",[_._v("MySQL把事务和锁的信息记录在了"),e("code",[_._v("information_schema")]),_._v("库中，涉及到的三张表分别是"),e("code",[_._v("INNODB_TRX")]),_._v("、"),e("code",[_._v("INNODB_LOCKS")]),_._v("和"),e("code",[_._v("INNODB_LOCK_WAITS")]),_._v("。")]),_._v(" "),e("p",[e("code",[_._v("MySQL5.7及之前")]),_._v("，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况。")]),_._v(" "),e("p",[_._v("MySQL8.0删除了information_schema.INNODB_LOCKS，添加了"),e("code",[_._v("performance_schema.data_locks")]),_._v("，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同，performance_schema.data_locks不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。")]),_._v(" "),e("p",[_._v("同时，information_schema.INNODB_LOCK_WAITS也被"),e("code",[_._v("performance_schema.data_lock_waits")]),_._v("所代替。")]),_._v(" "),e("h1",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[_._v("#")])])])}),[],!1,null,null,null);v.default=s.exports}}]);