(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{707:function(s,t,_){"use strict";_.r(t);var a=_(33),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,_=s._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("h1",{attrs:{id:"第1章-mysql8其它新特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第1章-mysql8其它新特性"}},[s._v("#")]),s._v(" 第1章 MySQL8其它新特性")]),s._v(" "),_("h2",{attrs:{id:"_1-新特性1-窗口函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-新特性1-窗口函数"}},[s._v("#")]),s._v(" "),_("strong",[s._v("1.")]),s._v(" "),_("strong",[s._v("新特性1：窗口函数")])]),s._v(" "),_("h3",{attrs:{id:"_1-1-窗口函数分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-窗口函数分类"}},[s._v("#")]),s._v(" "),_("strong",[s._v("1.1")]),s._v(" "),_("strong",[s._v("窗口函数分类")])]),s._v(" "),_("p",[s._v("MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。")]),s._v(" "),_("p",[s._v("窗口函数可以分为"),_("code",[s._v("静态窗口函数")]),s._v("和"),_("code",[s._v("动态窗口函数")]),s._v("。")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；")])]),s._v(" "),_("li",[_("p",[s._v("动态窗口函数的窗口大小会随着记录的不同而变化。")])])]),s._v(" "),_("table",[_("thead",[_("tr",[_("th",[s._v("函数分类")]),s._v(" "),_("th",[s._v("函数")]),s._v(" "),_("th",[s._v("函数说明")])])]),s._v(" "),_("tbody",[_("tr",[_("td",[s._v("序号函数")]),s._v(" "),_("td",[s._v("ROW_NUMBER()")]),s._v(" "),_("td",[s._v("顺序排序")])]),s._v(" "),_("tr",[_("td"),s._v(" "),_("td",[s._v("RANK()")]),s._v(" "),_("td",[s._v("并列排序，会跳过重复的序号，比如序号为1、1、3")])]),s._v(" "),_("tr",[_("td"),s._v(" "),_("td",[s._v("DENSE_RANK()")]),s._v(" "),_("td",[s._v("并列排序，不会跳过重复的序号，比如序号为1、1、2")])]),s._v(" "),_("tr",[_("td",[s._v("分布函数")]),s._v(" "),_("td",[s._v("PERCENT_RANK()")]),s._v(" "),_("td",[s._v("等级值百分比")])]),s._v(" "),_("tr",[_("td"),s._v(" "),_("td",[s._v("CUME_DIST()")]),s._v(" "),_("td",[s._v("累积分布值")])]),s._v(" "),_("tr",[_("td",[s._v("前后函数")]),s._v(" "),_("td",[s._v("LAG(expr, n)")]),s._v(" "),_("td",[s._v("返回当前行的前n行的expr的值")])]),s._v(" "),_("tr",[_("td"),s._v(" "),_("td",[s._v("LEAD(expr, n)")]),s._v(" "),_("td",[s._v("返回当前行的后n行的expr的值")])]),s._v(" "),_("tr",[_("td",[s._v("首尾函数")]),s._v(" "),_("td",[s._v("FIRST_VALUE(expr)")]),s._v(" "),_("td",[s._v("返回第一个expr的值")])]),s._v(" "),_("tr",[_("td"),s._v(" "),_("td",[s._v("LAST_VALUE(expr)")]),s._v(" "),_("td",[s._v("返回最后一个expr的值")])]),s._v(" "),_("tr",[_("td",[s._v("其他函数")]),s._v(" "),_("td",[s._v("NTH_VALUE(expr, n)")]),s._v(" "),_("td",[s._v("返回第n个expr的值")])]),s._v(" "),_("tr",[_("td"),s._v(" "),_("td",[s._v("NTILE(n)")]),s._v(" "),_("td",[s._v("将分区中的有序数据分为n个桶，记录桶编号")])])])]),s._v(" "),_("h3",{attrs:{id:"_1-2-语法结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-语法结构"}},[s._v("#")]),s._v(" "),_("strong",[s._v("1.2")]),s._v(" "),_("strong",[s._v("语法结构")])]),s._v(" "),_("p",[s._v("窗口函数的语法结构是：")]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("函数 OVER（[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])]),_("p",[s._v("或者是：")]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("函数 OVER 窗口名 … WINDOW 窗口名 AS （[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br")])]),_("ul",[_("li",[s._v("OVER 关键字指定函数窗口的范围。\n"),_("ul",[_("li",[s._v("如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。")]),s._v(" "),_("li",[s._v("如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。")])])]),s._v(" "),_("li",[s._v("窗口名：为窗口设置一个别名，用来标识窗口。")]),s._v(" "),_("li",[s._v("PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。")]),s._v(" "),_("li",[s._v("ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。")]),s._v(" "),_("li",[s._v("FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。")])]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num, id, category_id, category, NAME, price, stock\nFROM goods;\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br")])]),_("h3",{attrs:{id:"_1-3-小-结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-小-结"}},[s._v("#")]),s._v(" "),_("strong",[s._v("1.3")]),s._v(" "),_("strong",[s._v("小 结")])]),s._v(" "),_("p",[s._v("窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数，这对我们在原表数据的基础上进行统计和排序非常有用。")]),s._v(" "),_("h2",{attrs:{id:"_2-新特性2-公用表表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-新特性2-公用表表达式"}},[s._v("#")]),s._v(" "),_("strong",[s._v("2.")]),s._v(" "),_("strong",[s._v("新特性2：公用表表达式")])]),s._v(" "),_("p",[s._v("公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。")]),s._v(" "),_("p",[s._v("依据语法结构和执行方式的不同，公用表表达式分为"),_("code",[s._v("普通公用表表达式")]),s._v("和"),_("code",[s._v("递归公用表表达式")]),s._v("2 种。")]),s._v(" "),_("h3",{attrs:{id:"_2-1-普通公用表表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-普通公用表表达式"}},[s._v("#")]),s._v(" "),_("strong",[s._v("2.1")]),s._v(" "),_("strong",[s._v("普通公用表表达式")])]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("WITH CTE名称 \nAS （子查询） \nSELECT|DELETE|UPDATE 语句;\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br"),_("span",{staticClass:"line-number"},[s._v("3")]),_("br")])]),_("p",[s._v("举例：查询员工所在的部门的详细信息。")]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("WITH emp_dept_id\nAS (SELECT DISTINCT department_id FROM employees)\nSELECT *\nFROM departments d JOIN emp_dept_id e\nON d.department_id = e.department_id;\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br"),_("span",{staticClass:"line-number"},[s._v("3")]),_("br"),_("span",{staticClass:"line-number"},[s._v("4")]),_("br"),_("span",{staticClass:"line-number"},[s._v("5")]),_("br")])]),_("h3",{attrs:{id:"_2-2-递归公用表表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-递归公用表表达式"}},[s._v("#")]),s._v(" "),_("strong",[s._v("2.2")]),s._v(" "),_("strong",[s._v("递归公用表表达式")])]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("WITH RECURSIVE \nCTE名称 AS （子查询） \nSELECT|DELETE|UPDATE 语句;\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br"),_("span",{staticClass:"line-number"},[s._v("3")]),_("br")])]),_("p",[s._v("**案例：**针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下属。")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1，表示是第一代管理者。")])]),s._v(" "),_("li",[_("p",[s._v("用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次的值加 1。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。")])]),s._v(" "),_("li",[_("p",[s._v("在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是下下属了。这样就得到了我们需要的结果集。")])])]),s._v(" "),_("p",[_("strong",[s._v("代码实现：")])]),s._v(" "),_("div",{staticClass:"language-mysql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v("WITH RECURSIVE cte \nAS(SELECT employee_id,last_name,manager_id,1 AS n FROM employees WHERE employee_id = 100\n-- 种子查询，找到第一代领导 \nUNION ALL \nSELECT a.employee_id,a.last_name,a.manager_id,n+1 FROM employees AS a JOIN cte \nON (a.manager_id = cte.employee_id) -- 递归查询，找出以递归公用表表达式的人为领导的人 \n)\nSELECT employee_id,last_name FROM cte WHERE n >= 3;\n")])]),s._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[s._v("1")]),_("br"),_("span",{staticClass:"line-number"},[s._v("2")]),_("br"),_("span",{staticClass:"line-number"},[s._v("3")]),_("br"),_("span",{staticClass:"line-number"},[s._v("4")]),_("br"),_("span",{staticClass:"line-number"},[s._v("5")]),_("br"),_("span",{staticClass:"line-number"},[s._v("6")]),_("br"),_("span",{staticClass:"line-number"},[s._v("7")]),_("br"),_("span",{staticClass:"line-number"},[s._v("8")]),_("br")])]),_("h3",{attrs:{id:"_2-3-小-结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-小-结"}},[s._v("#")]),s._v(" "),_("strong",[s._v("2.3")]),s._v(" "),_("strong",[s._v("小 结")])]),s._v(" "),_("p",[s._v("公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。")])])}),[],!1,null,null,null);t.default=e.exports}}]);