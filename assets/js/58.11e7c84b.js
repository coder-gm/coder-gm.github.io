(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{656:function(a,t,s){"use strict";s.r(t);var e=s(33),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"数据类型分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型分类"}},[a._v("#")]),a._v(" 数据类型分类")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img2018.cnblogs.com/common/1729117/201911/1729117-20191108180356079-1219254443.png",alt:"img"}})]),a._v(" "),s("h1",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[a._v("#")]),a._v(" 基本数据类型")]),a._v(" "),s("p",[a._v("基本类型共有八种，其中包括六种数值型与两个非数值型。基本数据类型的信息如下：")]),a._v(" "),s("p",[a._v("（注解：内存的存储最小单位是“bit/位”，1byte/字节 = 8bit/位）")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("数据类型")]),a._v(" "),s("th",[a._v("大小（单位：bit/位）")]),a._v(" "),s("th",[a._v("所属包装类")]),a._v(" "),s("th",[a._v("最小范围")]),a._v(" "),s("th",[a._v("最大范围")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("byte")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("java.lang.Byte")]),a._v(" "),s("td",[a._v("-128")]),a._v(" "),s("td",[a._v("+127")])]),a._v(" "),s("tr",[s("td",[a._v("short")]),a._v(" "),s("td",[a._v("2byte = 16")]),a._v(" "),s("td",[a._v("java.langShort")]),a._v(" "),s("td",[a._v("-32768")]),a._v(" "),s("td",[a._v("+32767")])]),a._v(" "),s("tr",[s("td",[a._v("int")]),a._v(" "),s("td",[a._v("4byte = 32")]),a._v(" "),s("td",[a._v("java.lang.Integer")]),a._v(" "),s("td",[a._v("-2^31")]),a._v(" "),s("td",[a._v("+2^31-1")])]),a._v(" "),s("tr",[s("td",[a._v("long")]),a._v(" "),s("td",[a._v("8byte = 64")]),a._v(" "),s("td",[a._v("java.lang.Long")]),a._v(" "),s("td",[a._v("-2^63")]),a._v(" "),s("td",[a._v("+2^63-1")])]),a._v(" "),s("tr",[s("td",[a._v("float")]),a._v(" "),s("td",[a._v("4buye = 32")]),a._v(" "),s("td",[a._v("java.lang.Float")]),a._v(" "),s("td",[a._v("-3.4 * 10^38")]),a._v(" "),s("td",[a._v("+3.4 * 10^38")])]),a._v(" "),s("tr",[s("td",[a._v("double")]),a._v(" "),s("td",[a._v("8byte = 64")]),a._v(" "),s("td",[a._v("java.lang.Double")]),a._v(" "),s("td",[a._v("-1.7 * 10^308")]),a._v(" "),s("td",[a._v("+1.7 * 10^308")])]),a._v(" "),s("tr",[s("td",[a._v("char")]),a._v(" "),s("td",[a._v("2byte = 16")]),a._v(" "),s("td",[a._v("java.lang.Character")]),a._v(" "),s("td",[a._v("0")]),a._v(" "),s("td",[a._v("65535")])]),a._v(" "),s("tr",[s("td",[a._v("boolean")]),a._v(" "),s("td",[a._v("所占大小不明确")]),a._v(" "),s("td",[a._v("java.lang.Boolean")]),a._v(" "),s("td",[a._v('只有"true"和"false"两个取值')]),a._v(" "),s("td")])])]),a._v(" "),s("p",[s("strong",[a._v("（注意：在Java中定义的八种基本数据类型中，除了其它七种类型都有明确的内存占用字节数外，boolean类型没有给出明确的占用字节数，因为对虚拟机来说根本就不存在 boolean 这个类型，在虚拟机中boolean类型的值：false/true是用0/1来表示的，所以不确定。原因如下：）")])]),a._v(" "),s("p",[a._v("大小为1bit：")]),a._v(" "),s("p",[a._v("boolean类型的值只有true和false两种逻辑值，在编译后会使用1和0来表示，这两个数在内存中只需要1位（bit）即可存储，位是计算机最小的存储单位。")]),a._v(" "),s("p",[a._v("大小为1byte：")]),a._v(" "),s("p",[a._v("虽然编译后1和0只需占用1位空间，但计算机处理数据的最小单位是1个字节，1个字节等于8位，实际存储的空间是：用1个字节的最低位存储，其他7位用0填补，如果值是true的话则存储的二进制为：0000 0001，如果是false的话则存储的二进制为：0000 0000。")]),a._v(" "),s("p",[a._v("大小为4byte：")]),a._v(" "),s("p",[a._v("来源是《Java虚拟机规范》一书中的描述：“虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素boolean元素占8位”。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字节。")]),a._v(" "),s("p",[a._v("显然第三条是更准确的说法，那虚拟机为什么要用int来代替boolean呢？为什么不用byte或short，这样不是更节省内存空间吗。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的是32/64位系统，而是指CPU硬件层面），具有高效存取的特点。所以boolean类型没有给出精确的定义，《Java虚拟机规范》给出了4个字节，和boolean数组1个字节的定义，具体还要看虚拟机实现是否按照规范来，所以1个字节、4个字节都是有可能的。")]),a._v(" "),s("h2",{attrs:{id:"整数类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数类型"}},[a._v("#")]),a._v(" 整数类型")]),a._v(" "),s("p",[a._v("Java中整数类型一般默认为int型，整型有四种表示形式：①二进制（锋二进一）、②八进制（锋八进一）、③十进制（也就是我们生活中所表达的类型，锋十进一）、④十六进制（锋十六进一）；")]),a._v(" "),s("p",[s("strong",[a._v("（注意：十六进制从第十位开始就不是数字了，而是字母，如：10就为A,11为B，16为10，28为1C）")])]),a._v(" "),s("p",[s("strong",[a._v("（注意：我们一般声明整型时默认的就是十进制，若要声明其他进制形式，需要在值的最前面加上特定的标识）")])]),a._v(" "),s("p",[a._v("如：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//声明一个二进制byte型变量a，给定值为4(二进制为100)，（二进制以0b标识）")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//声明一个八进制short型变量b，给定值为144(八进制为100)，（八进制以0标识）")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//声明一个十六进制int型变量c，给定值为400(十六进制为100)，（十六进制以0x标识）")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("声明一个byte型变量：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("声明一个short型变量：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("声明一个int型变量：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("声明一个long型变量：")]),a._v(" "),s("p",[a._v("​      "),s("strong",[a._v("（注意：若声明了long类型，且该值在int范围内，则后面可以不加“L”，否则需要在后面加上“L”）")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5555555555555555L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h2",{attrs:{id:"浮点类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点类型"}},[a._v("#")]),a._v(" 浮点类型")]),a._v(" "),s("p",[a._v("Java中浮点类型一般默认为double型")]),a._v(" "),s("p",[a._v("float：单精度浮点（小数点后可精确到7位有效数字）")]),a._v(" "),s("p",[a._v("double：双精度浮点（小数点后可精确到float的二倍有效数字）")]),a._v(" "),s("p",[a._v("声明一个float型变量：")]),a._v(" "),s("p",[s("strong",[a._v("（注意：声明float型需要在后面加上“f”或“F”）")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("float c = 3.14f;\nfloat d = 3.14F;\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("声明一个double型的变量：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("double e = 3.1415;\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("（注意：浮点类型存在舍入误差，如果需要不产生误差的小数类型用来精确计算可以使用java.math包下的BigDecimal类）")])]),a._v(" "),s("h2",{attrs:{id:"字符型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符型"}},[a._v("#")]),a._v(" 字符型")]),a._v(" "),s("p",[a._v("我们知道Java中的字符是基于Unicode码表的，所以字符型是用来表示Unicode编码中的字符的，范围在：“0 - 65535”，也就是说char也可以用数字来表示；字符型在赋值的时候与其他类型有点区别，char作为单个字符型，在赋值时要加上单引号。")]),a._v(" "),s("p",[a._v("声明一个char型变量：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("char a = 'A';\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h2",{attrs:{id:"布尔型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔型"}},[a._v("#")]),a._v(" 布尔型")]),a._v(" "),s("p",[a._v("boolean型只有两个值，true（正确/真）和false（错误/假）；一般用boolean来做判断或者接收判断结果；")]),a._v(" "),s("p",[a._v("声明一个boolean型变量：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("boolean flag = true;\nboolean boo = false;\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h1",{attrs:{id:"包装数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包装数据类型"}},[a._v("#")]),a._v(" 包装数据类型")]),a._v(" "),s("p",[a._v("引用类型分别有：")]),a._v(" "),s("h2",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),s("p",[a._v("​\t\t具备某些共同特征的实体的集合,它是一种抽象的数据类型,它是对所具有相同特征实体的抽象。")]),a._v(" "),s("p",[a._v("定义一个类TestDemo：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public class TestDemo{\n\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),s("p",[a._v("​\t\t接口可以理解为：定义了一系列规范，在编写程序的时候“必须”遵循接口所规定的所有要求。")]),a._v(" "),s("p",[a._v("定义一个接口TestInterface：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public interface TestInterface{\n\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),s("p",[a._v("​      用于储存多个相同类型数据的集合。")]),a._v(" "),s("p",[a._v("定义一个int型的数组：给定值“0，1，2”")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("int[] array = {0,1,2};\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("Java中也有字符串类型，而且与C/C++一样都是String，只不过在Java中String（字符串类型）是作为一个类来实现的，也就是说，Java中String类型是属于引用类型的，属于类。")]),a._v(" "),s("p",[a._v("不过String类型在使用时并没那么麻烦，String在声明赋值时与char不同，因为是字符串，所以要带双引号。")]),a._v(" "),s("p",[a._v("声明一个String型变量：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('String str = "Hello";\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("可以这样理解：只要不是基本数据类型的八种，以外的都是属于引用数据类型的。")])]),a._v(" "),s("h1",{attrs:{id:"基本类型和包装类型的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和包装类型的区别"}},[a._v("#")]),a._v(" 基本类型和包装类型的区别")]),a._v(" "),s("p",[a._v("包装类是对象，拥有方法和字段，对象的调用都是通过引用对象的地址；基本类型不是\n2、包装类型是引用的传递；基本类型是值的传递\n3、声明方式不同：\n基本数据类型不需要new关键字；\n包装类型需要new在堆内存中进行new来分配内存空间\n4、存储位置不同：\n基本数据类型直接将值保存在值栈中；\n包装类型是把对象放在堆中，然后通过对象的引用来调用他们\n5、初始值不同：\nint的初始值为 0 、 boolean的初始值为false\n包装类型的初始值为null\n6、使用方式不同：\n基本数据类型直接赋值使用就好；\n包装类型是在集合如 coolectionMap时使用")])])}),[],!1,null,null,null);t.default=v.exports}}]);