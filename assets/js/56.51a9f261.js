(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{661:function(a,t,e){"use strict";e.r(t);var s=e(33),v=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"构造方法详细信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造方法详细信息"}},[a._v("#")]),a._v(" 构造方法详细信息")]),a._v(" "),e("h2",{attrs:{id:"double-double-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double-double-value"}},[a._v("#")]),a._v(" Double(double value)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public Double(double value)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("构造一个新分配的 "),e("code",[a._v("Double")]),a._v("对象，代表原始的 "),e("code",[a._v("double")]),a._v("参数。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("value")]),a._v(" -值由表示 "),e("code",[a._v("Double")]),a._v(" 。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" d0"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1855615.484151")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("h2",{attrs:{id:"double-string-s"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double-string-s"}},[a._v("#")]),a._v(" Double(String s)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public Double(String s)\n       throws NumberFormatException\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("构造一个新分配的"),e("code",[a._v("Double")]),a._v("对象，该对象表示由字符串表示的类型"),e("code",[a._v("double")]),a._v("的浮点值。  该字符串被转换为一个"),e("code",[a._v("double")]),a._v("值如果由"),e("code",[a._v("valueOf")]),a._v("方法。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("s")]),a._v(" -一个字符串被转换为 "),e("code",[a._v("Double")]),a._v(" 。")])]),a._v(" "),e("li",[e("p",[a._v("异常")]),a._v(" "),e("p",[e("code",[a._v("NumberFormatException")]),a._v("  - 如果字符串不包含可解析的数字。")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#valueOf-java.lang.String-"}},[e("code",[a._v("valueOf(java.lang.String)")])])],1),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"865289445.5418748"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])])])]),a._v(" "),e("h1",{attrs:{id:"方法详细信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法详细信息"}},[a._v("#")]),a._v(" 方法详细信息")]),a._v(" "),e("h2",{attrs:{id:"十六进制字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十六进制字符串"}},[a._v("#")]),a._v(" 十六进制字符串")]),a._v(" "),e("h3",{attrs:{id:"tohexstring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tohexstring"}},[a._v("#")]),a._v(" toHexString")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static String toHexString(double d)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[e("strong",[a._v("返回"),e("code",[a._v("double")]),a._v("参数的十六进制字符串"),e("code",[a._v("double")]),a._v("形式")]),a._v("。下面提到的所有字符都是ASCII字符。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("如果参数是NaN，结果是字符串“ "),e("code",[a._v("NaN")]),a._v(" ”。")])]),a._v(" "),e("li",[e("p",[a._v("否则，结果是一个表示参数的符号和大小的字符串。")]),a._v(" "),e("p",[a._v("如果符号为负，则结果的第一个字符为' "),e("code",[a._v("-")]),a._v("  '（ "),e("code",[a._v("'\\u002D'")]),a._v(" ）;")]),a._v(" "),e("p",[a._v("如果符号为正，则结果中不会出现任何符号字符。")]),a._v(" "),e("p",[a._v("至于幅度"),e("em",[a._v("m")]),a._v(" ：")]),a._v(" "),e("ul",[e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("是无穷大，它由字符串"),e("code",[a._v('"Infinity"')]),a._v(" ;  因此，正无穷大产生结果"),e("code",[a._v('"Infinity"')]),a._v("和负无穷大产生结果"),e("code",[a._v('"-Infinity"')]),a._v("  。")]),a._v(" "),e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("为零，则用字符串"),e("code",[a._v('"0x0.0p0"')]),a._v(" ;  因此，负零产生结果"),e("code",[a._v('"-0x0.0p0"')]),a._v(" ，正零产生结果"),e("code",[a._v('"0x0.0p0"')]),a._v(" 。")]),a._v(" "),e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("是具有"),e("code",[a._v("double")]),a._v("一化表示的"),e("code",[a._v("double")]),a._v('值，则使用子字符串来表示有效位数和指数字段。  有效数字由字符"0x1." '),e("code",[a._v('"0x1."')]),a._v("后面是有意义数据的其余部分的小写十六进制表示形式作为分数。  删除十六进制表示中的尾随零，除非所有数字都为零，在这种情况下使用单个零。  接下来，指数由"),e("code",[a._v('"p"')]),a._v("后跟无偏差指数的十进制字符串，就好像通过对指数值调用"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Integer.html#toString-int-"}},[e("code",[a._v("Integer.toString")])]),a._v("产生的"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Integer.html#toString-int-"}},[a._v("那样")]),a._v(" 。")],1),a._v(" "),e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("是具有"),e("code",[a._v("double")]),a._v("表示的"),e("code",[a._v("double")]),a._v("值，则有效位数由字符"),e("code",[a._v('"0x0."')]),a._v("后面是有效数的其余部分的十六进制表示作为分数。  删除十六进制表示中的尾随零。 接下来，指数由"),e("code",[a._v('"p-1022"')]),a._v(" 。  请注意，在异常有效位数中必须至少有一个非零数字。")])])])]),a._v(" "),e("p",[a._v("Examples  Floating-point Value Hexadecimal String "),e("code",[a._v("1.0")]),a._v(" "),e("code",[a._v("0x1.0p0")]),a._v(" "),e("code",[a._v("-1.0")]),a._v(" "),e("code",[a._v("-0x1.0p0")]),a._v(" "),e("code",[a._v("2.0")]),a._v(" "),e("code",[a._v("0x1.0p1")]),a._v(" "),e("code",[a._v("3.0")]),a._v(" "),e("code",[a._v("0x1.8p1")]),a._v(" "),e("code",[a._v("0.5")]),a._v(" "),e("code",[a._v("0x1.0p-1")]),a._v(" "),e("code",[a._v("0.25")]),a._v(" "),e("code",[a._v("0x1.0p-2")]),a._v(" "),e("code",[a._v("Double.MAX_VALUE")]),a._v(" "),e("code",[a._v("0x1.fffffffffffffp1023")]),a._v(" "),e("code",[a._v("Minimum Normal Value")]),a._v(" "),e("code",[a._v("0x1.0p-1022")]),a._v(" "),e("code",[a._v("Maximum Subnormal Value")]),a._v(" "),e("code",[a._v("0x0.fffffffffffffp-1022")]),a._v(" "),e("code",[a._v("Double.MIN_VALUE")]),a._v(" "),e("code",[a._v("0x0.0000000000001p-1022")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("d")]),a._v(" -的 "),e("code",[a._v("double")]),a._v("进行转换。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("参数的十六进制字符串表示形式。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.5")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" d "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4567890.852")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("toHexString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"十六进制字符串`double`形式===>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("h2",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[a._v("#")]),a._v(" 类型转换")]),a._v(" "),e("h3",{attrs:{id:"string转double"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string转double"}},[a._v("#")]),a._v(" String转Double")]),a._v(" "),e("h4",{attrs:{id:"valueof-string-s"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#valueof-string-s"}},[a._v("#")]),a._v(" valueOf(String s)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static Double valueOf(String s)\n                      throws NumberFormatException\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("返回一个"),e("code",[a._v("Double")]),a._v("对象，保存由参数字符串"),e("code",[a._v("s")]),a._v("的"),e("code",[a._v("double")]),a._v("值。")]),a._v(" "),e("p",[a._v("如果"),e("code",[a._v("s")]),a._v("是"),e("code",[a._v("null")]),a._v("  ，那么抛出一个"),e("code",[a._v("NullPointerException")]),a._v(" 。")]),a._v(" "),e("p",[a._v("s中的前导和尾随空格"),e("code",[a._v("s")]),a._v("将被忽略。 空格被删除，好像通过"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/String.html#trim--"}},[e("code",[a._v("String.trim()")])]),a._v("方法;  也就是说，ASCII空间和控制字符都被删除。  "),e("code",[a._v("s")]),a._v("的其余部分应构成"),e("em",[a._v("FloatValue")]),a._v(" ，如词法语法规则所述：")],1),a._v(" "),e("blockquote",[e("p",[e("em",[a._v("FloatValue:")]),a._v(" "),e("em",[a._v("Signopt")]),a._v(" "),e("code",[a._v("NaN")]),a._v(" "),e("em",[a._v("Signopt")]),a._v(" "),e("code",[a._v("Infinity")]),a._v(" "),e("em",[a._v("Signopt FloatingPointLiteral")]),a._v(" "),e("em",[a._v("Signopt HexFloatingPointLiteral")]),a._v(" "),e("em",[a._v("SignedInteger")]),a._v(" "),e("em",[a._v("HexFloatingPointLiteral")]),a._v(":  "),e("em",[a._v("HexSignificand BinaryExponent FloatTypeSuffixopt")]),a._v(" "),e("em",[a._v("HexSignificand:")]),a._v(" "),e("em",[a._v("HexNumeral")]),a._v(" "),e("em",[a._v("HexNumeral")]),a._v(" "),e("code",[a._v(".")]),a._v(" "),e("code",[a._v("0x")]),a._v(" "),e("em",[a._v("HexDigitsopt")]),a._v(" "),e("code",[a._v(".")]),a._v(" "),e("em",[a._v("HexDigits")]),a._v(" "),e("code",[a._v("0X")]),a._v(" "),e("em",[a._v("HexDigitsopt")]),a._v(" "),e("code",[a._v(".")]),a._v(" "),e("em",[a._v("HexDigits")]),a._v(" "),e("em",[a._v("BinaryExponent:")]),a._v(" "),e("em",[a._v("BinaryExponentIndicator SignedInteger")]),a._v(" "),e("em",[a._v("BinaryExponentIndicator:")]),a._v(" "),e("code",[a._v("p")]),a._v(" "),e("code",[a._v("P")])])]),a._v(" "),e("p",[a._v("其中"),e("em",[a._v("Sign")]),a._v(" ，  "),e("em",[a._v("FloatingPointLiteral")]),a._v(" ， "),e("em",[a._v("HexNumeral")]),a._v(" ， "),e("em",[a._v("HexDigits")]),a._v(" ，  "),e("em",[a._v("SignedInteger")]),a._v("和"),e("em",[a._v("FloatTypeSuffix")]),a._v("都在The Java™ Language  Specification的词法结构部分中定义 ，但数字之间不接受下划线。如果"),e("code",[a._v("s")]),a._v("不具有"),e("em",[a._v("的floatValue")]),a._v("的形式，那么"),e("code",[a._v("NumberFormatException")]),a._v("异常。否则， "),e("code",[a._v("s")]),a._v("被认为是在通常的“计算机科学符号”中表示精确的十进制值，或者作为确切的十六进制值;此确切数值然后被概念性地转换为一个“无限精确的”二进制值，然后将其倒圆的键入"),e("code",[a._v("double")]),a._v("由IEEE  754浮点运算，其包括保留0值的符号的通常舍入到最近的规则。注意，round-to-nearest规则也意味着溢出和下溢行为;如果"),e("code",[a._v("s")]),a._v("的确切值足够大（大于或等于（ "),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#MAX_VALUE"}},[e("code",[a._v("MAX_VALUE")])]),a._v(" + "),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Math.html#ulp-double-"}},[e("code",[a._v("ulp(MAX_VALUE)")]),a._v("/2")]),a._v("  ）），则舍入到"),e("code",[a._v("double")]),a._v("将导致无穷大，如果"),e("code",[a._v("s")]),a._v("的确切值足够小（小于或等于到"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#MIN_VALUE"}},[e("code",[a._v("MIN_VALUE")]),a._v("/2")]),a._v("  ），四舍五入将导致零。最后，在舍入后，返回一个"),e("code",[a._v("Double")]),a._v("对象，表示此"),e("code",[a._v("double")]),a._v("值。")],1),a._v(" "),e("p",[a._v("要解释浮点值的本地化字符串表示，请使用"),e("code",[a._v("NumberFormat")]),a._v("的"),e("RouterLink",{attrs:{to:"/01.Java/java/text/NumberFormat.html"}},[a._v("子类")]),a._v(" 。")],1),a._v(" "),e("p",[a._v("请注意，确定浮点数字（ "),e("code",[a._v("1.0f")]),a._v("值为"),e("code",[a._v("float")]),a._v(" ;  "),e("code",[a._v("1.0d")]),a._v("值为"),e("code",[a._v("double")]),a._v("值）的尾部格式说明符，说明符"),e("em",[a._v("不")]),a._v("影响此方法的结果。  换句话说，输入字符串的数值直接转换为目标浮点类型。  转换的两步序列，字符串为"),e("code",[a._v("float")]),a._v("后跟"),e("code",[a._v("float")]),a._v("至"),e("code",[a._v("double")]),a._v(" ，  "),e("em",[a._v("并不")]),a._v("等同于将字符串直接转换为"),e("code",[a._v("double")]),a._v(" 。 例如，  "),e("code",[a._v("float")]),a._v("字面值"),e("code",[a._v("0.1f")]),a._v("等于"),e("code",[a._v("double")]),a._v("值"),e("code",[a._v("0.10000000149011612")]),a._v("  ;  所述"),e("code",[a._v("float")]),a._v("字面"),e("code",[a._v("0.1f")]),a._v("表示不同的数值比"),e("code",[a._v("double")]),a._v("字面"),e("code",[a._v("0.1")]),a._v("  。 （数值0.1不能用二进制浮点数精确表示。）")]),a._v(" "),e("p",[a._v("避免调用上无效字符串这种方法和具有"),e("code",[a._v("NumberFormatException")]),a._v("被抛出，下面的正则表达式可以用于筛选输入字符串：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('   final String Digits = "(\\\\p{Digit}+)"; final String HexDigits = "(\\\\p{XDigit}+)"; // an exponent is \'e\' or \'E\' followed by an optionally // signed decimal integer. final String Exp = "[eE][+-]?"+Digits; final String fpRegex = ("[\\\\x00-\\\\x20]*"+ // Optional leading "whitespace" "[+-]?(" + // Optional sign character "NaN|" + // "NaN" string "Infinity|" + // "Infinity" string // A decimal floating-point string representing a finite positive // number without a leading sign has at most five basic pieces: // Digits . Digits ExponentPart FloatTypeSuffix // // Since this method allows integer-only strings as input // in addition to strings of floating-point literals, the // two sub-patterns below are simplifications of the grammar // productions from section 3.10.2 of // The Java Language Specification. // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt "((("+Digits+"(\\\\.)?("+Digits+"?)("+Exp+")?)|"+ // . Digits ExponentPart_opt FloatTypeSuffix_opt "(\\\\.("+Digits+")("+Exp+")?)|"+ // Hexadecimal strings "((" + // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt "(0[xX]" + HexDigits + "(\\\\.)?)|" + // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt "(0[xX]" + HexDigits + "?(\\\\.)" + HexDigits + ")" + ")[pP][+-]?" + Digits + "))" + "[fFdD]?))" + "[\\\\x00-\\\\x20]*");// Optional trailing "whitespace" if (Pattern.matches(fpRegex, myString)) Double.valueOf(myString); // Will not throw NumberFormatException else { // Perform suitable alternative action }  \n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("s")]),a._v(" - 要解析的字符串。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("一个 "),e("code",[a._v("Double")]),a._v("对象持有由 "),e("code",[a._v("String")]),a._v("参数表示的值。")])]),a._v(" "),e("li",[e("p",[a._v("异常")]),a._v(" "),e("p",[e("code",[a._v("NumberFormatException")]),a._v("  - 如果字符串不包含可解析的数字。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h4",{attrs:{id:"tostring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[a._v("#")]),a._v(" toString()")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public String toString()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此"),e("code",[a._v("Double")]),a._v("对象的字符串表示形式。  由该对象表示的"),e("code",[a._v("double")]),a._v("值double转换为一个字符串，如同一个参数的方法"),e("code",[a._v("toString")]),a._v("  。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("重写：")]),a._v(" "),e("p",[e("code",[a._v("toString")]),a._v("在类别 "),e("code",[a._v("Object")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("一个 "),e("code",[a._v("String")]),a._v("表示的这个对象。")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#toString-double-"}},[e("code",[a._v("toString(double)")])])],1)])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"double转double"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转double"}},[a._v("#")]),a._v(" double转Double")]),a._v(" "),e("h4",{attrs:{id:"valueof-double-d"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#valueof-double-d"}},[a._v("#")]),a._v(" valueOf(double d)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static Double valueOf(double d)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回一个"),e("code",[a._v("Double")]),a._v(" "),e("code",[a._v("double")]),a._v("值的"),e("code",[a._v("Double")]),a._v("实例。  如果不需要新的"),e("code",[a._v("Double")]),a._v("实例，则该方法通常优先于构造函数"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#Double-double-"}},[e("code",[a._v("Double(double)")]),a._v("使用")]),a._v("  ，因为该方法可能通过缓存经常请求的值而产生明显更好的空间和时间性能。")],1),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("d")]),a._v(" - 一个双重值。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("一个 "),e("code",[a._v("Double")]),a._v("实例，代表 "),e("code",[a._v("d")]),a._v(" 。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.5")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" d "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4567890.852")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h3",{attrs:{id:"double转string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转string"}},[a._v("#")]),a._v(" double转String")]),a._v(" "),e("h4",{attrs:{id:"tostring-double-d"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tostring-double-d"}},[a._v("#")]),a._v(" toString(double d)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static String toString(double d)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回"),e("code",[a._v("double")]),a._v("参数的字符串"),e("code",[a._v("double")]),a._v("形式。下面提到的所有字符都是ASCII字符。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("如果参数是NaN，结果是字符串“ "),e("code",[a._v("NaN")]),a._v(" ”。")])]),a._v(" "),e("li",[e("p",[a._v("否则，结果是表示参数的符号和大小（绝对值）的字符串。")]),a._v(" "),e("p",[a._v("如果符号为负，则结果的第一个字符为'  "),e("code",[a._v("-")]),a._v(" '（ "),e("code",[a._v("'\\u002D'")]),a._v(" ）;")]),a._v(" "),e("p",[a._v("如果符号为正，则结果中不会出现任何符号字符。")]),a._v(" "),e("p",[a._v("至于幅度"),e("em",[a._v("m")]),a._v(" ：")]),a._v(" "),e("ul",[e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("是无穷大，它由字符"),e("code",[a._v('"Infinity"')]),a._v(" ;  因此，正无穷大产生结果"),e("code",[a._v('"Infinity"')]),a._v("和负无穷大产生结果"),e("code",[a._v('"-Infinity"')]),a._v("  。")]),a._v(" "),e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("为零，则由"),e("code",[a._v('"0.0"')]),a._v(" ;  因此，负零产生结果"),e("code",[a._v('"-0.0"')]),a._v(" ，正零产生结果"),e("code",[a._v('"0.0"')]),a._v(" 。")]),a._v(" "),e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("大于或等于10 -3但小于10 7  ，则表示为"),e("em",[a._v("m")]),a._v("的整数部分，以十进制形式表示，不带前导零，后跟“ "),e("code",[a._v(".")]),a._v(" ”（ "),e("code",[a._v("'\\u002E'")]),a._v("  ），后跟一个或多个表示"),e("em",[a._v("m")]),a._v("的小数部分十进制数字。")]),a._v(" "),e("li",[a._v("如果"),e("em",[a._v("m")]),a._v("小于10 -3或大于或等于10 7  ，则表示为所谓的“计算机科学记数法”。 设"),e("em",[a._v("n")]),a._v("是唯一的整数，使得"),e("em",[a._v("10N")]),a._v("的‰¤  "),e("em",[a._v("米")]),a._v(" <10 "),e("em",[a._v("N")]),a._v(" + 1;  然后让"),e("em",[a._v("一个")]),a._v("是"),e("em",[a._v("m")]),a._v("的精确算术商和10 "),e("em",[a._v("牛顿")]),a._v(" ，使1个â‰¤ "),e("em",[a._v("一个")]),a._v("  <10.然后将大小被表示为"),e("em",[a._v("a")]),a._v("的整数部分，作为一个单一的十进制数字，后跟“ "),e("code",[a._v(".")]),a._v(" ”（  "),e("code",[a._v("'\\u002E'")]),a._v(" ），再后面是表示"),e("em",[a._v("一个")]),a._v("小数部分十进制数字，后面跟有字母“ "),e("code",[a._v("E")]),a._v(" ”（  "),e("code",[a._v("'\\u0045'")]),a._v(" ），接着为十进制整数"),e("em",[a._v("n")]),a._v("的表示，作为由该方法制备"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Integer.html#toString-int-"}},[e("code",[a._v("Integer.toString(int)")])]),a._v("  。")],1)])])]),a._v(" "),e("p",[e("em",[a._v("m")]),a._v("或"),e("em",[a._v("a")]),a._v("的小数部分必须打印多少位数？必须有至少一个数字来表示小数部分，并且除了必须唯一区分参数值和类型"),e("code",[a._v("double")]),a._v("相邻值所需的数量之外，还需要数量多的数字。也就是说，假设"),e("em",[a._v("x")]),a._v("是由用于有限非零参数"),e("em",[a._v("d")]),a._v("的该方法生成的十进制表示形式表示的精确数学值。那么"),e("em",[a._v("d")]),a._v("必须是最接近"),e("em",[a._v("x")]),a._v("的"),e("code",[a._v("double")]),a._v("值。或者如果两个"),e("code",[a._v("double")]),a._v("值同样接近"),e("em",[a._v("x，"),e("em",[a._v("那么")]),a._v("d")]),a._v("必须它们中的一个和"),e("em",[a._v("d")]),a._v("的有效数的至少显著位必须为"),e("code",[a._v("0")]),a._v("  。")]),a._v(" "),e("p",[a._v("要创建浮点值的本地化字符串表示，请使用"),e("code",[a._v("NumberFormat")]),a._v("的"),e("RouterLink",{attrs:{to:"/01.Java/java/text/NumberFormat.html"}},[a._v("子类")]),a._v(" 。")],1),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("d")]),a._v(" -的 "),e("code",[a._v("double")]),a._v("进行转换。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("参数的字符串表示形式。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"string-转double"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-转double"}},[a._v("#")]),a._v(" String 转double")]),a._v(" "),e("h4",{attrs:{id:"parsedouble-string-s"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parsedouble-string-s"}},[a._v("#")]),a._v(" parseDouble(String s)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static double parseDouble(String s)\n                          throws NumberFormatException\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("返回一个新的 "),e("code",[a._v("double")]),a._v(" ，由Double的 "),e("code",[a._v("valueOf")]),a._v("方法  "),e("code",[a._v("String")]),a._v(" ，初始化为由指定的 "),e("code",[a._v("valueOf")]),a._v("的 "),e("code",[a._v("Double")]),a._v(" 。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("s")]),a._v(" - 要解析的字符串。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("double")]),a._v("值由字符串参数表示。")])]),a._v(" "),e("li",[e("p",[a._v("异常")]),a._v(" "),e("p",[e("code",[a._v("NullPointerException")]),a._v("  - 如果字符串为空")]),a._v(" "),e("p",[e("code",[a._v("NumberFormatException")]),a._v("  - 如果字符串不包含可解析的 "),e("code",[a._v("double")]),a._v(" 。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.2")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#valueOf-java.lang.String-"}},[e("code",[a._v("valueOf(String)")])])],1)])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" s "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseDouble")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"7845181.451518"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h3",{attrs:{id:"double转为基本数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转为基本数据类型"}},[a._v("#")]),a._v(" Double转为基本数据类型")]),a._v(" "),e("h4",{attrs:{id:"double转byte"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转byte"}},[a._v("#")]),a._v(" Double转byte")]),a._v(" "),e("h5",{attrs:{id:"bytevalue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bytevalue"}},[a._v("#")]),a._v(" byteValue")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public byte byteValue()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此值 "),e("code",[a._v("Double")]),a._v("为 "),e("code",[a._v("byte")]),a._v("的基本收缩转换后。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("重写：")]),a._v(" "),e("p",[e("code",[a._v("byteValue")]),a._v("在类别 "),e("code",[a._v("Number")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("double")]),a._v("值由此对象表示转换为 "),e("code",[a._v("byte")])])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("JDK1.1")])]),a._v(" "),e("li",[e("p",[a._v("See The Java™ Language  Specification:")]),a._v(" "),e("p",[a._v("5.1.3缩小原始转换")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("48484.151848")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("byteValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("h4",{attrs:{id:"double转short"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转short"}},[a._v("#")]),a._v(" Double转short")]),a._v(" "),e("h5",{attrs:{id:"shortvalue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shortvalue"}},[a._v("#")]),a._v(" shortValue")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public short shortValue()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此值 "),e("code",[a._v("Double")]),a._v("为 "),e("code",[a._v("short")]),a._v("的基本收缩转换后。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("重写：")]),a._v(" "),e("p",[e("code",[a._v("shortValue")]),a._v("在类别  "),e("code",[a._v("Number")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("由此对象代表的 "),e("code",[a._v("double")]),a._v("值转换为 "),e("code",[a._v("short")])])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("JDK1.1")])]),a._v(" "),e("li",[e("p",[a._v("See The Java™ Language  Specification:")]),a._v(" "),e("p",[a._v("5.1.3缩小原始转换")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h4",{attrs:{id:"double转int"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转int"}},[a._v("#")]),a._v(" Double转int")]),a._v(" "),e("h5",{attrs:{id:"intvalue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#intvalue"}},[a._v("#")]),a._v(" intValue")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public int intValue()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此的值 "),e("code",[a._v("Double")]),a._v("作为 "),e("code",[a._v("int")]),a._v("的基本收缩转换之后。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Specified by:")]),a._v(" "),e("p",[e("code",[a._v("intValue")]),a._v("在类别 "),e("code",[a._v("Number")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("double")]),a._v("值由此对象表示转换为 "),e("code",[a._v("int")]),a._v("型")])]),a._v(" "),e("li",[e("p",[a._v("See The Java™ Language  Specification:")]),a._v(" "),e("p",[a._v("5.1.3缩小原始转换")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h4",{attrs:{id:"double转long"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转long"}},[a._v("#")]),a._v(" Double转long")]),a._v(" "),e("h5",{attrs:{id:"longvalue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#longvalue"}},[a._v("#")]),a._v(" longValue")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public long longValue()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此值 "),e("code",[a._v("Double")]),a._v("为 "),e("code",[a._v("long")]),a._v("的基本收缩转换后。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Specified by:")]),a._v(" "),e("p",[e("code",[a._v("longValue")]),a._v("在类别 "),e("code",[a._v("Number")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("所述 "),e("code",[a._v("double")]),a._v("该对象表示值转换为类型 "),e("code",[a._v("long")])])]),a._v(" "),e("li",[e("p",[a._v("See The Java™ Language  Specification:")]),a._v(" "),e("p",[a._v("5.1.3缩小原始转换")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h4",{attrs:{id:"double转flout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转flout"}},[a._v("#")]),a._v(" Double转flout")]),a._v(" "),e("h5",{attrs:{id:"floatvalue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#floatvalue"}},[a._v("#")]),a._v(" floatValue")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public float floatValue()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此值 "),e("code",[a._v("Double")]),a._v("为 "),e("code",[a._v("float")]),a._v("的基本收缩转换后。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Specified by:")]),a._v(" "),e("p",[e("code",[a._v("floatValue")]),a._v("在类别  "),e("code",[a._v("Number")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("所述 "),e("code",[a._v("double")]),a._v("该对象表示值转换为类型 "),e("code",[a._v("float")])])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("JDK1.0")])]),a._v(" "),e("li",[e("p",[a._v("See The Java™ Language  Specification:")]),a._v(" "),e("p",[a._v("5.1.3缩小原始转换")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h4",{attrs:{id:"double转double-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double转double-2"}},[a._v("#")]),a._v(" Double转double")]),a._v(" "),e("h5",{attrs:{id:"doublevalue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doublevalue"}},[a._v("#")]),a._v(" doubleValue")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public double doubleValue()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此 "),e("code",[a._v("Double")]),a._v("对象的 "),e("code",[a._v("double")]),a._v("值。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Specified by:")]),a._v(" "),e("p",[e("code",[a._v("doubleValue")]),a._v("在类别  "),e("code",[a._v("Number")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("double")]),a._v("由此对象 "),e("code",[a._v("double")]),a._v("值")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断"}},[a._v("#")]),a._v(" 判断")]),a._v(" "),e("h3",{attrs:{id:"是否是数字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是否是数字"}},[a._v("#")]),a._v(" 是否是数字")]),a._v(" "),e("h4",{attrs:{id:"isnan"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isnan"}},[a._v("#")]),a._v(" isNaN")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static boolean isNaN(double v)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("如果指定的数字是非数字（NaN）值，则返回 "),e("code",[a._v("true")]),a._v(" ， "),e("code",[a._v("false")]),a._v("  false。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("v")]),a._v(" - 要测试的值。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("true")]),a._v("如果参数的值是NaN; "),e("code",[a._v("false")]),a._v("否则。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"是否是无穷大"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是否是无穷大"}},[a._v("#")]),a._v(" 是否是无穷大")]),a._v(" "),e("h4",{attrs:{id:"isinfinite-double-v"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isinfinite-double-v"}},[a._v("#")]),a._v(" isInfinite(double v)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static boolean isInfinite(double v)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回 "),e("code",[a._v("true")]),a._v("如果指定的数量是无限大， "),e("code",[a._v("false")]),a._v("其他。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("v")]),a._v(" - 要测试的值。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("true")]),a._v("如果参数的值是正无穷大或负无穷大;  "),e("code",[a._v("false")]),a._v("否则。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h4",{attrs:{id:"isinfinite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isinfinite"}},[a._v("#")]),a._v(" isInfinite()")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public boolean isInfinite()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回 "),e("code",[a._v("true")]),a._v("如果这个 "),e("code",[a._v("Double")]),a._v("数值无限大，  "),e("code",[a._v("false")]),a._v(" false。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("true")]),a._v("如果该对象表示的值是正无穷大或负无穷大;  "),e("code",[a._v("false")]),a._v("否则。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"是否是有限浮点数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是否是有限浮点数"}},[a._v("#")]),a._v(" 是否是有限浮点数")]),a._v(" "),e("h4",{attrs:{id:"isfinite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isfinite"}},[a._v("#")]),a._v(" isFinite")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static boolean isFinite(double d)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("如果参数是有限浮点值，则返回"),e("code",[a._v("true")]),a._v(" ;  返回"),e("code",[a._v("false")]),a._v(" （对于NaN和无穷大参数）。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("d")]),a._v(" - 要测试的 "),e("code",[a._v("double")]),a._v("值")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("true")]),a._v("如果参数是一个有限浮点值， "),e("code",[a._v("false")]),a._v("否则。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.8")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"是否是nan"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是否是nan"}},[a._v("#")]),a._v(" 是否是NAN")]),a._v(" "),e("h4",{attrs:{id:"isnan-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isnan-2"}},[a._v("#")]),a._v(" isNaN")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public boolean isNaN()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回 "),e("code",[a._v("true")]),a._v("如果这 "),e("code",[a._v("Double")]),a._v("值是不是非数字（NAN），  "),e("code",[a._v("false")]),a._v("其他。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("true")]),a._v("如果该对象表示的值为NaN;  "),e("code",[a._v("false")]),a._v("否则。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"是否等于"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是否等于"}},[a._v("#")]),a._v(" 是否等于")]),a._v(" "),e("h4",{attrs:{id:"equals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#equals"}},[a._v("#")]),a._v(" equals")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public boolean equals(Object obj)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("将此对象与指定对象进行比较。其结果是"),e("code",[a._v("true")]),a._v("当且仅当该参数不是"),e("code",[a._v("null")]),a._v("并且是"),e("code",[a._v("Double")]),a._v("对象，它表示一个"),e("code",[a._v("double")]),a._v("具有相同的值作为"),e("code",[a._v("double")]),a._v("该对象表示。为此，当且仅当方法"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#doubleToLongBits-double-"}},[e("code",[a._v("doubleToLongBits(double)")])]),a._v("在应用于每个时返回相同的"),e("code",[a._v("long")]),a._v("值时，两个"),e("code",[a._v("double")]),a._v("值被认为是相同的。")],1),a._v(" "),e("p",[a._v("请注意，在大多数情况下，类的两个实例"),e("code",[a._v("Double")]),a._v(" ， "),e("code",[a._v("d1")]),a._v("和"),e("code",[a._v("d2")]),a._v("  ，值"),e("code",[a._v("d1.equals(d2)")]),a._v("是"),e("code",[a._v("true")]),a._v("当且仅当")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("d1.doubleValue() == d2.doubleValue()")])])]),a._v(" "),e("p",[a._v("也有值"),e("code",[a._v("true")]),a._v(" 。 但是，有两个例外：")]),a._v(" "),e("ul",[e("li",[a._v("如果"),e("code",[a._v("d1")]),a._v("和"),e("code",[a._v("d2")]),a._v("都代表"),e("code",[a._v("Double.NaN")]),a._v("  ，那么"),e("code",[a._v("equals")]),a._v("方法返回"),e("code",[a._v("true")]),a._v("  ，即使"),e("code",[a._v("Double.NaN==Double.NaN")]),a._v("的值为"),e("code",[a._v("false")]),a._v(" 。")]),a._v(" "),e("li",[a._v("如果"),e("code",[a._v("d1")]),a._v("表示"),e("code",[a._v("+0.0")]),a._v("  ，而"),e("code",[a._v("d2")]),a._v("表示"),e("code",[a._v("-0.0")]),a._v(" ，反之亦然，  "),e("code",[a._v("equal")]),a._v("测试值为"),e("code",[a._v("false")]),a._v("  ，即使"),e("code",[a._v("+0.0==-0.0")]),a._v("的值为"),e("code",[a._v("true")]),a._v(" 。")])]),a._v(" "),e("p",[a._v("此定义允许哈希表正常运行。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("重写：")]),a._v(" "),e("p",[e("code",[a._v("equals")]),a._v("在类别  "),e("code",[a._v("Object")])])]),a._v(" "),e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("obj")]),a._v(" - 要比较的对象。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("true")]),a._v("如果对象是一样的; "),e("code",[a._v("false")]),a._v("否则。")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#doubleToLongBits-double-"}},[e("code",[a._v("doubleToLongBits(double)")])])],1)])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"获取哈希码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取哈希码"}},[a._v("#")]),a._v(" 获取哈希码")]),a._v(" "),e("h3",{attrs:{id:"hashcode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashcode"}},[a._v("#")]),a._v(" hashCode")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public int hashCode()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回此"),e("code",[a._v("Double")]),a._v("对象的哈希码。结果是"),e("code",[a._v("long")]),a._v("整数位表示的两半的异或，正如由方法"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#doubleToLongBits-double-"}},[e("code",[a._v("doubleToLongBits(double)")])]),a._v("所产生的，由这个"),e("code",[a._v("Double")]),a._v("对象表示的原始"),e("code",[a._v("double")]),a._v("值。也就是说，哈希码是表达式的值：")],1),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("(int)(v^(v>>>32))")])])]),a._v(" "),e("p",[a._v("其中"),e("code",[a._v("v")]),a._v("由以下定义：")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("long v = Double.doubleToLongBits(this.doubleValue());")])])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("重写：")]),a._v(" "),e("p",[e("code",[a._v("hashCode")]),a._v("在类别 "),e("code",[a._v("Object")])])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("一个 "),e("code",[a._v("hash code")]),a._v("这个对象的值。")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/lang/Object.html#equals-java.lang.Object-"}},[e("code",[a._v("Object.equals(java.lang.Object)")])]),a._v("  ， "),e("RouterLink",{attrs:{to:"/01.Java/java/lang/System.html#identityHashCode-java.lang.Object-"}},[e("code",[a._v("System.identityHashCode(java.lang.Object)")])])],1)])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h3",{attrs:{id:"hashcode-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-2"}},[a._v("#")]),a._v(" hashCode")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static int hashCode(double value)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回一个"),e("code",[a._v("double")]),a._v("值的哈希码;  兼容"),e("code",[a._v("Double.hashCode()")]),a._v(" 。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("value")]),a._v(" - 哈希值")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("一个哈希码值为 "),e("code",[a._v("double")]),a._v("值。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.8")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[a._v("#")]),a._v(" 比较")]),a._v(" "),e("h3",{attrs:{id:"compareto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compareto"}},[a._v("#")]),a._v(" compareTo")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public int compareTo(Double anotherDouble)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[e("strong",[a._v("相等返回0，大于返回1，小于返回-1.")])]),a._v(" "),e("p",[a._v("数字比较两个"),e("code",[a._v("Double")]),a._v("对象。当应用于原始"),e("code",[a._v("double")]),a._v("值时，通过此方法进行比较的方式与Java语言数值比较运算符（ "),e("code",[a._v("<, <=, ==, >=, >")]),a._v(" ）执行的比较有两种"),e("code",[a._v("double")]),a._v(" ：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Double.NaN")]),a._v("被认为是等于本身并且大于所有其他"),e("code",[a._v("double")]),a._v("值（包括"),e("code",[a._v("Double.POSITIVE_INFINITY")]),a._v("  ）。")]),a._v(" "),e("li",[e("code",[a._v("0.0d")]),a._v("被认为是大于"),e("code",[a._v("-0.0d")]),a._v(" 。")])]),a._v(" "),e("p",[a._v("这确保了这种方法施加的"),e("code",[a._v("Double")]),a._v("对象的"),e("em",[a._v("自然排序")]),a._v(" "),e("em",[a._v("与equals一致")]),a._v("  。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Specified by:")]),a._v(" "),e("p",[e("code",[a._v("compareTo")]),a._v("在界面  "),e("code",[a._v("Comparable<Double>")])])]),a._v(" "),e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("anotherDouble")]),a._v(" - 要比较的 "),e("code",[a._v("Double")]),a._v(" 。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("0")]),a._v("如果"),e("code",[a._v("anotherDouble")]),a._v("在数字上等于这个"),e("code",[a._v("Double")]),a._v("  ;  一个值小于"),e("code",[a._v("0")]),a._v("如果这个"),e("code",[a._v("Double")]),a._v("在数字上小于"),e("code",[a._v("anotherDouble")]),a._v("  ;  如果这个"),e("code",[a._v("Double")]),a._v("大于"),e("code",[a._v("0")]),a._v("那么这个值大于"),e("code",[a._v("anotherDouble")]),a._v("  。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.2")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d0"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d1"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d2"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d3"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d4"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d5"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br")])]),e("h3",{attrs:{id:"compare"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compare"}},[a._v("#")]),a._v(" compare")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static int compare(double d1,\n                          double d2)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("比较两个指定的"),e("code",[a._v("double")]),a._v("值。返回的整数值的符号与调用返回的整数的符号相同：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  new Double(d1).compareTo(new Double(d2)) \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("d1")]),a._v(" - 第一个 "),e("code",[a._v("double")]),a._v("进行比较")]),a._v(" "),e("p",[e("code",[a._v("d2")]),a._v(" - 第二个 "),e("code",[a._v("double")]),a._v("进行比较")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("0")]),a._v("如果"),e("code",[a._v("d1")]),a._v("在数字上等于"),e("code",[a._v("d2")]),a._v(" ;  的值小于"),e("code",[a._v("0")]),a._v("如果"),e("code",[a._v("d1")]),a._v("在数值上小于"),e("code",[a._v("d2")]),a._v(" ;  如果"),e("code",[a._v("d1")]),a._v("在数值上大于"),e("code",[a._v("0")]),a._v("则值大于"),e("code",[a._v("d2")]),a._v(" 。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.4")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d0 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("compare")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("compare")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d4 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" d5 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"=======>:{}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("compare")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("d4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" d5"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br")])]),e("h3",{attrs:{id:"相加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相加"}},[a._v("#")]),a._v(" 相加")]),a._v(" "),e("h3",{attrs:{id:"sum"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sum"}},[a._v("#")]),a._v(" sum")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static double sum(double a,\n                         double b)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("根据+运算符将两个 "),e("code",[a._v("double")]),a._v("值一起添加。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("a")]),a._v(" - 第一个操作数")]),a._v(" "),e("p",[e("code",[a._v("b")]),a._v(" - 第二个操作数")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("总和 "),e("code",[a._v("a")]),a._v("和 "),e("code",[a._v("b")])])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.8")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/util/function/BinaryOperator.html"}},[e("code",[a._v("BinaryOperator")])])],1)]),a._v(" "),e("li",[e("p",[a._v("See The Java™ Language  Specification:")]),a._v(" "),e("p",[a._v("4.2.4浮点运算")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"取最大值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取最大值"}},[a._v("#")]),a._v(" 取最大值")]),a._v(" "),e("h3",{attrs:{id:"max"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#max"}},[a._v("#")]),a._v(" max")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static double max(double a,\n                         double b)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("返回两个 "),e("code",[a._v("double")]),a._v("的较大值，就像调用 "),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Math.html#max-double-double-"}},[e("code",[a._v("Math.max")]),a._v("一样")]),a._v("  。")],1),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("a")]),a._v(" - 第一个操作数")]),a._v(" "),e("p",[e("code",[a._v("b")]),a._v(" - 第二个操作数")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("a")]),a._v("和 "),e("code",[a._v("b")])])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.8")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/util/function/BinaryOperator.html"}},[e("code",[a._v("BinaryOperator")])])],1)])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"取最小值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取最小值"}},[a._v("#")]),a._v(" 取最小值")]),a._v(" "),e("h3",{attrs:{id:"min"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#min"}},[a._v("#")]),a._v(" min")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static double min(double a,\n                         double b)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("返回两个 "),e("code",[a._v("double")]),a._v("的较小值，就像调用 "),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Math.html#min-double-double-"}},[e("code",[a._v("Math.min")]),a._v("一样")]),a._v("  。")],1),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("a")]),a._v(" - 第一个操作数")]),a._v(" "),e("p",[e("code",[a._v("b")]),a._v(" - 第二个操作数")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("较小的 "),e("code",[a._v("a")]),a._v("和 "),e("code",[a._v("b")]),a._v(" 。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.8")])]),a._v(" "),e("li",[e("p",[a._v("另请参见：")]),a._v(" "),e("p",[e("RouterLink",{attrs:{to:"/01.Java/java/util/function/BinaryOperator.html"}},[e("code",[a._v("BinaryOperator")])])],1)])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"doubletolongbits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doubletolongbits"}},[a._v("#")]),a._v(" doubleToLongBits")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static long doubleToLongBits(double value)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("根据IEEE 754浮点“双格式”位布局返回指定浮点值的表示。")]),a._v(" "),e("p",[a._v("位63（由掩码"),e("code",[a._v("0x8000000000000000L")]),a._v("选择的位）表示浮点数的符号。  位62-52（由掩码"),e("code",[a._v("0x7ff0000000000000L")]),a._v("选择的位）表示指数。  位51-0（由掩码"),e("code",[a._v("0x000fffffffffffffL")]),a._v("选择的位）表示浮点数的有效数（有时称为尾数）。")]),a._v(" "),e("p",[a._v("如果参数为无穷大，则结果为"),e("code",[a._v("0x7ff0000000000000L")]),a._v(" 。")]),a._v(" "),e("p",[a._v("如果参数为负无穷大，则结果为"),e("code",[a._v("0xfff0000000000000L")]),a._v(" 。")]),a._v(" "),e("p",[a._v("如果参数是NaN，结果是"),e("code",[a._v("0x7ff8000000000000L")]),a._v(" 。")]),a._v(" "),e("p",[a._v("在所有情况下，结果是"),e("code",[a._v("long")]),a._v("整数，当给予"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#longBitsToDouble-long-"}},[e("code",[a._v("longBitsToDouble(long)")])]),a._v("方法时，将产生与"),e("code",[a._v("doubleToLongBits")]),a._v("的参数相同的浮点值（除了所有NaN值都被折叠为单个“规范”NaN值）。")],1),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("value")]),a._v(" - 一个 "),e("code",[a._v("double")]),a._v("精度浮点数。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("表示浮点数的位。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"doubletorawlongbits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doubletorawlongbits"}},[a._v("#")]),a._v(" doubleToRawLongBits")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static long doubleToRawLongBits(double value)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("根据IEEE 754浮点“双格式”位布局返回指定浮点值的表示，保留非数字（NaN）值。")]),a._v(" "),e("p",[a._v("位63（由掩码"),e("code",[a._v("0x8000000000000000L")]),a._v("选择的位）表示浮点数的符号。  位62-52（由掩码"),e("code",[a._v("0x7ff0000000000000L")]),a._v("选择的位）表示指数。  位51-0（由掩码"),e("code",[a._v("0x000fffffffffffffL")]),a._v("选择的位）表示浮点数的有效数（有时称为尾数）。")]),a._v(" "),e("p",[a._v("如果参数为无穷大，结果为"),e("code",[a._v("0x7ff0000000000000L")]),a._v(" 。")]),a._v(" "),e("p",[a._v("如果参数为负无穷大，则结果为"),e("code",[a._v("0xfff0000000000000L")]),a._v(" 。")]),a._v(" "),e("p",[a._v("如果参数是NaN，则结果是表示实际NaN值的"),e("code",[a._v("long")]),a._v("整数。  与"),e("code",[a._v("doubleToLongBits")]),a._v("方法不同，  "),e("code",[a._v("doubleToRawLongBits")]),a._v("不会将编码NaN的所有位模式折叠到单个“规范”NaN值。")]),a._v(" "),e("p",[a._v("在所有情况下，结果是一个"),e("code",[a._v("long")]),a._v("整数，当给予"),e("RouterLink",{attrs:{to:"/01.Java/java/lang/Double.html#longBitsToDouble-long-"}},[e("code",[a._v("longBitsToDouble(long)")])]),a._v("方法时，将产生与"),e("code",[a._v("doubleToRawLongBits")]),a._v("的参数相同的浮点值。")],1),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("value")]),a._v(" - 一个 "),e("code",[a._v("double")]),a._v("精度浮点数。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[a._v("表示浮点数的位。")])]),a._v(" "),e("li",[e("p",[a._v("从以下版本开始：")]),a._v(" "),e("p",[a._v("1.3")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])]),a._v(" "),e("h2",{attrs:{id:"longbitstodouble"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#longbitstodouble"}},[a._v("#")]),a._v(" longBitsToDouble")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static double longBitsToDouble(long bits)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("返回与给"),e("code",[a._v("double")]),a._v("表示相对应的"),e("code",[a._v("double")]),a._v("值。该参数被认为是根据IEEE 754浮点“双格式”位布局的浮点值的表示。")]),a._v(" "),e("p",[a._v("如果参数是"),e("code",[a._v("0x7ff0000000000000L")]),a._v(" ，结果是正无穷大。")]),a._v(" "),e("p",[a._v("如果参数为"),e("code",[a._v("0xfff0000000000000L")]),a._v(" ，结果为负无穷大。")]),a._v(" "),e("p",[a._v("如果参数在上述范围内的任何值"),e("code",[a._v("0x7ff0000000000001L")]),a._v("通过"),e("code",[a._v("0x7fffffffffffffffL")]),a._v("  ，或在范围"),e("code",[a._v("0xfff0000000000001L")]),a._v("通过"),e("code",[a._v("0xffffffffffffffffL")]),a._v("  ，其结果是NaN。 Java提供的IEEE 754浮点运算不能用不同的位模式区分同一类型的两个NaN值。  NaN的不同值只能通过使用"),e("code",[a._v("Double.doubleToRawLongBits")]),a._v("方法进行"),e("code",[a._v("Double.doubleToRawLongBits")]),a._v("  。")]),a._v(" "),e("p",[a._v("在所有其他情况下，令"),e("em",[a._v("s")]),a._v(" ， "),e("em",[a._v("e")]),a._v("和"),e("em",[a._v("m")]),a._v("是可以从参数计算的三个值：")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("int s = ((bits >> 63) == 0) ? 1 : -1; int e = (int)((bits >> 52) & 0x7ffL); long m = (e == 0) ? (bits & 0xfffffffffffffL) << 1 : (bits & 0xfffffffffffffL) | 0x10000000000000L;")])])]),a._v(" "),e("p",[a._v("那么浮点结果等于数学表达式"),e("em",[a._v("s")]),a._v(" · "),e("em",[a._v("m")]),a._v(" ·2  "),e("em",[a._v("e")]),a._v(" -1075的值 。")]),a._v(" "),e("p",[a._v("请注意，此方法可能无法返回与"),e("code",[a._v("long")]),a._v("参数完全相同的位模式的"),e("code",[a._v("double")]),a._v("  NaN。 IEEE 754区分了两种NaN，安静的NaN和"),e("em",[a._v("信号NaN")]),a._v(" 。  两种NaN之间的区别通常在Java中不可见。  信号NaN的算术运算将它们变成具有不同但通常相似的位模式的安静的NaN。  然而，在某些处理器上，仅仅复制信号NaN也执行该转换。  特别地，复制信令NaN以将其返回到调用方法可以执行该转换。  所以"),e("code",[a._v("longBitsToDouble")]),a._v("可能无法返回一个"),e("code",[a._v("double")]),a._v("具有signaling  NaN的位模式。 因此，对于一些"),e("code",[a._v("long")]),a._v("值，  "),e("code",[a._v("doubleToRawLongBits(longBitsToDouble(start))")]),a._v("可能"),e("em",[a._v("不")]),a._v("等于"),e("code",[a._v("start")]),a._v("  。 此外，哪些特定位模式表示信令NaN是平台依赖的;  尽管所有NaN位模式，安静或信令都必须位于上面确定的NaN范围内。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("参数")]),a._v(" "),e("p",[e("code",[a._v("bits")]),a._v(" - 任何 "),e("code",[a._v("long")]),a._v("整数。")])]),a._v(" "),e("li",[e("p",[a._v("结果")]),a._v(" "),e("p",[e("code",[a._v("double")]),a._v("具有相同位模式的浮点值。")])])]),a._v(" "),e("p",[e("strong",[a._v("代码示例:")])])])}),[],!1,null,null,null);t.default=v.exports}}]);